#+TITLE: Имитационное моделирование нерегулярного волнения для программ динамики морских объектов
#+AUTHOR: Иван Ганкевич
#+DATE: Санкт-Петербург, 2018
#+LANGUAGE: ru
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [14pt,aspectratio=169]
#+LATEX_HEADER_EXTRA: \input{slides-titlepage-ru}
#+LATEX_HEADER_EXTRA: \input{slides-preamble}
#+BEAMER_THEME: SaintPetersburg
#+OPTIONS: todo:nil title:nil ':t toc:nil H:2
#+STARTUP: indent
#+PROPERTY: header-args:R :results graphics :exports results :eval no-export

#+begin_export latex
\setbeamertemplate{title page}{%
	\centering%
	\vskip1cm\spbuInsertField{title}%
	\ifx\insertsubtitle\empty\else%
		\vskip0.5\baselineskip%
		\spbuInsertField{subtitle}%
	\fi%
	\vfill\spbuInsertField{author}%
	\vfill\spbuInsertField{institute}%
	\vfill\inserttitlegraphic%
	\vfill\spbuInsertField{date}%
}
\setbeamerfont{block title}{size=\small}
\setbeamerfont{note page}{size=\footnotesize}
\setjobnamebeamerversion{arma-slides-ru}
\mode*
#+end_export

* Введение
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

** Титульный лист
:PROPERTIES:
:BEAMER_env: fullframe
:BEAMER_act: <presentation>
:BEAMER_opt: label=slide-title
:END:

#+beamer: \maketitle

** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-title}

Здравствуйте, уважаемые члены совета, коллеги и гости. Меня зовут Иван Ганкевич.
Моя диссертация посвящена имитационному моделированию морского волнения.
Диссертация выполнена под руководством д.т.н.\nbsp{}Дегтярева Александра
Борисовича.

** Постановка задачи
:PROPERTIES:
:BEAMER_act: <presentation>
:BEAMER_opt: label=slide-problem
:END:

Разработать
- трехмерную имитационную модель морского волнения,
- метод вычисления поля давлений под взволнованной поверхностью,
- программный комплекс для систем с общей и распределенной памятью,
которые являются /альтернативами/ аналогам, разработанным в рамках
линейной теории волн.

** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-problem}

Цель исследования заключалась в изучении и разработке математических моделей и
численных методов, которые бы позволили выйти за рамки линейной теории волн в
задаче имитационного моделирования морского волнения и стать альтернативами
моделям и методам, основанных на этой теории.

В рамках данного исследования была разработана
- трехмерная имитационная математическая модель морского волнения,
- метод вычисления поля давлений под взволнованной морской поверхностью и
- программный комплекс, реализующий модель и метод, для систем с общей и
  распределенной памятью.

* Трехмерная модель АРСС

** Трехмерная модель АРСС
:PROPERTIES:
:BEAMER_act: <presentation>
:BEAMER_opt: label=slide-arma
:END:

\begin{equation*}
  \rectemph{zeta1}{\zeta_{i,j,k}} =
  \sum\limits_{l=0}^{p_1}
  \sum\limits_{m=0}^{p_2}
  \sum\limits_{n=0}^{p_3}
  \rectemph{phi}{\Phi_{l,m,n}} \rectemph{zeta2}{\zeta_{i-l,j-m,k-n}}
  +
  \sum\limits_{l=0}^{q_1}
  \sum\limits_{m=0}^{q_2}
  \sum\limits_{n=0}^{q_3}
  \rectemph{theta}{\Theta_{l,m,n}} \rectemph{eps}{\epsilon_{i-l,j-m,k-n}}
\end{equation*}

#+begin_export latex
\begin{tikzpicture}[remember picture,overlay]
\node[fill=none,baseline,anchor=south west,xshift=1.1cm,yshift=-1.75cm]
	(zetaLabel) at (current page.north west)
	{\scriptsize{}подъем взволнованной поверхности};
\node[fill=none,anchor=south east,xshift=-2cm,yshift=-1.75cm]
	(epsLabel) at (current page.north east)
	{\scriptsize{}белый шум};
\node[fill=none,baseline,anchor=north west,below=of phi,yshift=0.2cm]
	(phiLabel)
	{\scriptsize{}коэффициенты АР};
\node[fill=none,baseline,anchor=north west,below=of theta,yshift=0.2cm]
	(thetaLabel)
	{\scriptsize{}коэффициенты СС};
\path[->,thick] (zetaLabel.south -| zeta1.north) edge (zeta1.north);
\path[->,thick] (zetaLabel.south -| zeta2.north west)
	edge [transform canvas={xshift=2mm}]
	(zeta2.north west);
\path[->,thick] (epsLabel.south -| eps.north west)
	edge [transform canvas={xshift=2mm}]
	(eps.north west);
\path[->,thick] (phiLabel.north -| phi.south west)
	edge [transform canvas={xshift=2.5mm}]
	(phi.south west);
\path[->,thick] (thetaLabel.north -| theta.south west)
	edge [transform canvas={xshift=2.5mm}]
	(theta.south west);
\end{tikzpicture}
#+end_export

#+BEAMER: \vspace{0.5cm}\pause

#+begin_src dot :exports results :file build/arma-pipeline-ru.pdf
digraph G {

  node [
	  fontname="Open Sans",
	  fontsize=10,
	  margin="0.055,0",
	  shape=box,
	  fillcolor="#E5E6E5",
	  style="filled",
	  height="0.37",
	  color="#404040"
  ]
  graph [nodesep="0.25",ranksep="0.30",rankdir="LR" margin=0]
  edge [arrowsize=0.66,color="#404040"]
  bgcolor="#F5F6F5"

  acf [label="АКФ"]
  yule_walker_equations [label="Уравнения\nЮла—Уокера"]
  nonlinear_equations [label="Нелинейные\nуравнения"]
  ar_process [label="Модель\nАР"]
  ma_process [label="Модель\nСС"]
  arma_process [label="Модель\nАРСС"]

  acf->yule_walker_equations->ar_process->arma_process
  acf->nonlinear_equations->ma_process->arma_process

}
#+end_src

#+RESULTS:
[[file:build/arma-pipeline-ru.pdf]]

** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-arma<2>}

В качестве имитационной модели в данной работе используется модель авторегрессии
скользящего среднего (сокращенно, модель АРСС). Эта модель применяется в
статистике для анализа и прогнозирования одномерных скалярно- и векторно-значных
временных рядов, в данной же работе ее трехмерный аналог адаптирован для
воспроизведения значений подъема взволнованной морской поверхности в дискретные
моменты времени. Имитация морского волнения с помощью одномерной модели АРСС
была изучена в работах Рожкова, Гургенидзе, Трапезникова, Бухановского, Спаноса
и Зельдина.

Основное уравнение трехмерной модели АРСС представлено на слайде. Параметрами
являются
- дисперсия белого шума, имеющего нормальное распределение,
- коэффициенты авторегрессии и
- коэффициенты скользящего среднего.

Параметры модели определяются из автоковариационной функции взволнованной
морской поверхности путем решения соответствующих систем уравнений. Для
получения коэффициентов авторегрессии решается система линейных алгебраических
уравнений Юла---Уокера стандартным методом, а для получения коэффициентов
скользящего среднего решается система нелинейных уравнений методом простой
итерации.

Основным отличием модели АРСС от линейных аналогов является
- использование автоковариационной функции вместо частотно-направленных спектров
  морского волнения и
- нефизическая природа модели, поскольку ее формулы не выводятся из
  законов сохранения для морского волнения.
Обсудим каждое из них по порядку.

** АКФ морской поверхности
:PROPERTIES:
:BEAMER_act: <presentation>
:BEAMER_OPT: label=slide-acf
:END:

*** Columns
:PROPERTIES:
:BEAMER_env: columns
:END:

**** Column 1
:PROPERTIES:
:BEAMER_col: 1.00
:END:

#+latex: \vspace{-0.5cm}
#+begin_src dot :exports results :file build/acf-pipeline-ru.pdf
digraph G {

  node [
	  fontname="Open Sans",
	  fontsize=10,
	  margin="0.055,0",
	  shape=box,
	  fillcolor="#E5E6E5",
	  style="filled",
	  color="#404040"
  ]
  graph [nodesep="0.25",ranksep="0.20",rankdir="TB" margin=0]
  edge [arrowsize=0.66,color="#404040"]
  bgcolor="#F5F6F5"

  function [label="Формула\nповерхности волны",height="0.40"]
  discrete_function [label="Дискретная\nповерхность волны",height="0.40"]
  field_data [label="Натурные\nданные",width="1.1",height="0.40"]
  theorem [label="Теорема Винера—Хинчина",height="0.20"]
  acf [label="АКФ",height="0.20"]

  function->theorem
  discrete_function->theorem
  field_data->theorem
  theorem->acf

}
#+end_src

#+RESULTS:
[[file:build/acf-pipeline-ru.pdf]]

*** Separator
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

*** Columns
:PROPERTIES:
:BEAMER_env: columns
:BEAMER_opt: T
:END:

**** Column 1
:PROPERTIES:
:BEAMER_col: 0.30
:END:

#+header: :width 1.7 :height 1.2 :bg #F5F6F5 :font sans
#+begin_src R :file build/acf-propagating-plain-wave-ru.pdf
source(file.path("R", "common.R"))
par(mar=c(0,0.5,0,0))
df <- data.frame(t=rep(NA,0), x=rep(NA,0), y=rep(NA,0), z=rep(NA,0))
n <- 20
grid <- seq(1, n)
alpha <- 2.13975
beta <- 0.77341
gamm <- 0.549017
for (i in grid) {
	for (j in grid) {
    x <- i/(n-1)
    y <- j/(n-1)
		z <- gamm * exp(-alpha*(x+y)) * cos(beta*(x+y))
		df[nrow(df) + 1,] <- c(0,i,j,z)
	}
}
arma.wavy_plot(df, 0, zlim=c(0,0.5), expand=0.5, border=NA)
#+end_src

#+caption: Плоская волна
#+RESULTS:
[[file:build/acf-propagating-plain-wave-ru.pdf]]


**** Column 2
:PROPERTIES:
:BEAMER_col: 0.35
:END:

#+header: :width 1.7 :height 1.2 :bg #F5F6F5 :font sans
#+begin_src R :file build/acf-standing-plain-wave-ru.pdf
source(file.path("R", "common.R"))
par(mar=c(0,0.5,0,0))
df <- data.frame(t=rep(NA,0), x=rep(NA,0), y=rep(NA,0), z=rep(NA,0))
n <- 20
grid <- seq(1, n)
alpha <- 2.31906
beta <- -5.49873
gamm <- 0.0680413
for (i in grid) {
	for (j in grid) {
    x <- i/(n-1)
    y <- j/(n-1)
		z <- gamm * exp(-alpha*(x+y)) * cos(beta*x) * cos(beta*y)
		df[nrow(df) + 1,] <- c(0,i,j,z)
	}
}
arma.wavy_plot(df, 0, zlim=c(-0.05,0.05), expand=0.5, border=NA)
#+end_src

#+caption: Плоская стоячая волна
#+RESULTS:
[[file:build/acf-standing-plain-wave-ru.pdf]]

**** Column 3
:PROPERTIES:
:BEAMER_col: 0.30
:END:

#+header: :width 1.7 :height 1.2 :bg #F5F6F5 :font sans
#+begin_src R :file build/acf-propagating-stokes-wave-ru.pdf
source(file.path("R", "common.R"))
par(mar=c(0,0.5,0,0))
df <- data.frame(t=rep(NA,0), x=rep(NA,0), y=rep(NA,0), z=rep(NA,0))
n <- 40
alpha <- 0.5
grid <- seq(1, n)
k <- 0.77341
t <- 0
omega <- 0.3
a <- 1.5
for (i in grid) {
	for (j in grid) {
    x <- i/(n-1)
    y <- j/(n-1)
    theta <- k*(x + y) - omega*t
		z <- a * exp(-alpha*(x+y)) * (cos(theta) + 0.5*k*a*cos(2*theta) + (3/8)*(k*a*k*a)*cos(3*theta))
		df[nrow(df) + 1,] <- c(0,i,j,z)
	}
}
arma.acf_plot(df, 0, zlim=c(0,1.0), expand=0.5, border=NA)
#+end_src

#+caption: Волна Стокса
#+RESULTS:
[[file:build/acf-propagating-stokes-wave-ru.pdf]]

** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-acf}

Одним из основных отличий модели АРСС от линейных аналогов является
использование автоковариационной функции вместо частотно-направленных спектров
морского волнения, что позволяет получить ряд преимуществ. Автоковариационная
функция включает в себя не только две пространственные, но и временную
компоненту, что позволяет моделировать форму волны, а не только частоту и
направление движения. Посредством теоремы Винера---Хинчина автоковариационная
функция легко вычисляется аналитически из явной формулы взволнованной
поверхности или численно из дискретно заданной взволнованной поверхности или
натурных данных. Модель способна воспроизводить плоские волны, волны Стокса и
нерегулярное волнение, автоковариационные функции которых показаны на слайде.

** Верификация модели АРСС
:PROPERTIES:
:BEAMER_act: <presentation>
:BEAMER_OPT: label=slide-arma-verification
:END:

*** Стоячие волны
:PROPERTIES:
:BEAMER_col: 0.47
:BEAMER_opt: T
:END:

#+latex: \vspace{-1cm}
#+header: :width 2.7 :height 2.7 :bg #F5F6F5 :font sans
#+begin_src R :file build/standing-wave-qqplots-slides-ru.pdf
source(file.path("R", "common.R"))
par(pty="s", mfrow=c(2, 2), mar=c(1,1,1,0), mgp=c(3,0.3,0), cex=0.6, fg='black', col='navy')
arma.qqplot_grid_adj(
  file.path("build", "arma-benchmarks", "verification-orig", "standing_wave"),
  c("elevation", "heights_y", "lengths_y", "periods"),
  c("подъем", "высота", "длина", "период"),
  0.1,
  xlab="x",
  ylab="y",
  tck=0.04
)
#+end_src

#+caption: Стоячие волны
#+RESULTS:
[[file:build/standing-wave-qqplots-slides-ru.pdf]]


*** Прогрессивные волны
:PROPERTIES:
:BEAMER_col: 0.47
:BEAMER_opt: T
:END:

#+latex: \vspace{-1cm}
#+header: :width 2.7 :height 2.7 :bg #F5F6F5 :font sans
#+begin_src R :file build/propagating-wave-qqplots-slides-ru.pdf
source(file.path("R", "common.R"))
par(pty="s", mfrow=c(2, 2), mar=c(1,1,1,0), mgp=c(3,0.3,0), cex=0.6, col='navy')
arma.qqplot_grid_adj(
  file.path("build", "arma-benchmarks", "verification-orig", "propagating_wave"),
  c("elevation", "heights_y", "lengths_y", "periods"),
  c("подъем", "высота", "длина", "период"),
  0.1,
  xlab="x",
  ylab="y",
  tck=0.04
)
#+end_src

#+caption: Прогрессивные волны
#+RESULTS:
[[file:build/propagating-wave-qqplots-slides-ru.pdf]]


** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-arma-verification}

Другим основным отличием модели АРСС от линейных аналогов является ее
нефизическая природа. Формулы модели не выводятся из физических законов
сохранения и модель неспособна воспроизводить индивидуальные волны. Вместо этого
воспроизводится взволнованная морская поверхность как единое целое,
распределения интегральных характеристик которой совпадают с реальными.

На слайде представлены спрямленные диаграммы (quantile-quantile plots)
распределений различных параметров волн. Чем ближе точки расположены к прямой
линии, тем выше степень совпадения распределений. Как видно из графиков,
распределения параметров прогрессивных волн почти полностью совпадает с
реальным, отличаясь лишь на хвостах, где размер выборки невелик. Распределения
параметров стоячих волн имеют большее расхождение на хвостах, ввиду отсутствия
надежных натурных данных для такого типа волн.

** Моделирование асимметричности                                  :noexport:
:PROPERTIES:
:BEAMER_act: <presentation>
:END:

#+begin_src dot :exports results :file build/slides-nit-pipeline-ru.pdf
digraph G {

  node [fontname="Open Sans",fontsize=10,margin="0.055,0",shape=box,fillcolor="#E5E6E5",style="filled",height="0.37"]
  graph [nodesep="0.55",ranksep="0.30",rankdir="TB",margin=0,splines=ortho]
  edge [fontname="Open Sans",fontsize=10,arrowsize=0.66]
  bgcolor="#F5F6F5"

  subgraph step1 {
    rank="same"
    acf [label="АКФ"]
    zeta [label="Поверхность"]
  }

  subgraph step2 {
    rank="same"
    acf_tr [label="АКФ'",fillcolor="#E5C6C5"]
    zeta_tr [label="Поверхность'",fillcolor="#E5C6C5"]
  }

  acf->zeta [color=invis]
  acf->acf_tr [label="      Разложение в ряд\l      по полиномам Эрмита\l"]
  acf_tr->zeta_tr
  zeta_tr->zeta [label="Преобразование\lаппликат\l"]

}
#+end_src

#+RESULTS:
[[file:build/slides-nit-pipeline-ru.pdf]]

#+header: :width 4 :height 1.5 :bg #F5F6F5 :font sans
#+begin_src R :file build/slides-nit-ru.pdf
source(file.path("R", "nonlinear.R"))
par(mar=c(2,2,0.3,0.1),cex=0.7,mgp=c(3,0.3,0))
args <- list(
  graphs=c('Гауссово', 'РГШ', 'АНР'),
  linetypes=c('solid', 'dashed', 'dotted'),
  axis=list(tck=-0.04),
  legend="bottom"
)
args$title <- NULL
arma.plot_nonlinear(file.path("build", "nit-standing"), args)
#+end_src

#+RESULTS:
[[file:build/slides-nit-ru.pdf]]


* Поле давлений под дискретно заданной взволнованной поверхностью

** Уравнения для потенциала скорости
:PROPERTIES:
:BEAMER_act: <presentation>
:BEAMER_opt: label=slide-potential-flow
:END:

#+beamer: \footnotesize
#+begin_export latex
\begin{beamercolorbox}[colsep*=.75ex,vmode]{block body}%
\vspace{-\baselineskip}%
\begin{align*}%
    & \nabla^2\phi = 0
	& \text{уравнение неразрывности}
	\\
    & \phi_t+\frac{1}{2} |\vec{\upsilon}|^2 + g\zeta=-\frac{p}{\rho}
    & \text{динамическое ГУ на }z=\zeta(x,y,t)
	\\
    & D\zeta = \nabla \phi \cdot \vec{n}
    & \text{кинематическое ГУ на }z=\zeta(x,y,t)\\
\end{align*}%
\vspace{-2.5\baselineskip}%
\end{beamercolorbox}%
%
\pause%
%
\spbuArrow{}%
\vspace{-0.2cm}%
%
\begin{beamercolorbox}[colsep*=.75ex,vmode]{block body}%
\vspace{-\baselineskip}%
\begin{align*}%
    & \phi_{xx} + \phi_{yy} + \phi_{zz} = 0\\
    & \zeta_t 
    = \underbrace{\fillrectemph{f1}{\left(\FracSqrtZetaY{\zeta_x} - \zeta_x\right)}}_{f_1} \phi_x
    + \underbrace{\fillrectemph{f2}{\left(\FracSqrtZetaY{\zeta_y} - \zeta_y\right)}}_{f_2} \phi_y
    - \underbrace{\fillrectemph{f3}{\FracSqrtZetaY{1}}}_{f_3} \phi_z \\
\end{align*}%
\vspace{-2.7\baselineskip}%
\end{beamercolorbox}%
%
\pause%
#+end_export

*** Columns
:PROPERTIES:
:BEAMER_env: columns
:BEAMER_opt: T
:END:

**** Column 1
:PROPERTIES:
:BEAMER_col: 0.47
:END:
#+begin_export latex
\vspace{-\baselineskip}%
\spbuArrow{}%
\vspace{-1.3\baselineskip}%
\begingroup%
\setlength\abovedisplayskip{1mm}%
\begin{beamercolorbox}[colsep*=.75ex,vmode]{block body}%
Решение в рамках линейной теории:%
\begin{equation*}%
\phi(x,y,z,t) = \mathcal{W}_1(x,y,z) \mathrel{*} \left(-\zeta_t(x,y,t)\right)
\end{equation*}%
\vspace{-1.5\baselineskip}%
\end{beamercolorbox}%
\endgroup%
#+end_export

**** Column 2
:PROPERTIES:
:BEAMER_col: 0.47
:END:
#+begin_export latex
\vspace{-\baselineskip}%
\spbuArrow{}%
\vspace{-1.3\baselineskip}%
\begingroup%
\setlength\abovedisplayskip{1mm}%
\begin{beamercolorbox}[colsep*=.75ex,vmode]{block body}%
Общее решение:\vspace{-0.5\baselineskip}%
\begin{equation*}%
	\phi(x,y,z,t)
	=
	\mathcal{W}_2(x,y,z)
	\mathrel{*}
%	\frac{\zeta_t(x,y,t)}{i f_1(x,y,t) + i f_2(x,y,t) - f_3(x,y,t)}
	\frac{\zeta_t(x,y,t)}{F\left(f_1, f_2, f_3\right)}
%	& \mathcal{W}_1 \approx \mathcal{W}_2
\end{equation*}%
\vspace{-1.35\baselineskip}%
\end{beamercolorbox}%
\endgroup%
#+end_export

** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-potential-flow<3>}

Модель АРСС воспроизводит волны, распределения характеристик которых совпадает с
реальными, а значит, результирующую взволнованную морскую поверхность можно
использовать для вычисления поля давлений, создаваемого волнами. В то же время
поверхность может содержать волны произвольных амплитуд, из-за чего методы
вычисления поля давлений, используемые в рамках линейной теории волн,
неприменимы для модели АРСС. В связи с этим уравнения, описывающие движение
жидкости были решены без упрощений линейной теории.

Уравнения представлены на слайде. Это уравнение неразрывности (или уравнение
Лапласа), уравнение движения (или динамическое граничное условие) и
кинематическое граничное условие на свободной поверхности. Поскольку
взволнованная поверхность известна, второе уравнение превращается в явную
формулу для вычисления давлений, а задача сводится к поиску потенциала скорости
\(\phi\). На слайде красным цветом выделены множители, которыми пренебрегают в
рамках линейной теории волн.

Система решается методом Фурье с использованием некоторых физических и
математических упрощений, описанных в работе. Полное решение записывается в виде
свертки некоторой оконной функции с суперпозицией производных взволнованной
поверхности. Полученное решение отличается от решения из линейной теории
наличием удаленных множителей и другой записью оконной функции. Если
воспользоваться предположением о малости амплитуд волн, то полученное решение
сводится к решению из линейной теории волн.

** Верификация метода выч. давлений
:PROPERTIES:
:BEAMER_act: <presentation>
:BEAMER_OPT: label=slide-potential-verification
:END:


*** Columns
:PROPERTIES:
:BEAMER_env: columns
:BEAMER_opt: T
:END:

**** Column 1
:PROPERTIES:
:BEAMER_col: 0.47
:END:

#+beamer: \vspace{-0.5cm}
#+header: :width 2.7 :height 1.5 :bg #F5F6F5 :font sans
#+begin_src R :file build/slides-plain-wave-velocity-field-comparison-ru.pdf
source(file.path("R", "velocity-potentials.R"))
nlevels <- 41
levels <- pretty(c(-200,200), nlevels)
palette <- colorRampPalette(c("blue", "lightyellow", "red"))
col <- palette(nlevels-1)

par(pty="s",mgp=c(3,0.2,0),mfrow=c(1,2),mar=c(1.5,1,0,0),cex=0.66,bty="n")

# linear solver
#par(fig=c(0,0.95,0,0.5),new=TRUE)
arma.plot_velocity_potential_field(
  file.path("build", "arma-benchmarks", "verification-orig", "plain_wave_linear_solver"),
  levels=levels,
  col=col,
  contour_lwd=0.5,
  zeta_lwd=1,
  sky_col='#F5F6F5',
  axis_args=list(tck=-0.02),
  z_min=-5,
  title_args=list(main="     Линейная\n     теория",outer=FALSE,adj=0,line=-1.5,cex.main=0.77)
)

# high-amplitude solver
#par(fig=c(0,0.95,0.5,1),new=TRUE)
arma.plot_velocity_potential_field(
  file.path("build", "arma-benchmarks", "verification-orig", "plain_wave_high_amplitude_solver"),
  levels=levels,
  col=col,
  contour_lwd=0.5,
  zeta_lwd=1,
  sky_col='#F5F6F5',
  axis_args=list(tck=-0.02),
  z_min=-5,
  title_args=list(main="     Общее\n     решение",outer=FALSE,adj=0,line=-1.5,cex.main=0.77)
)
#+end_src

#+RESULTS:
[[file:build/slides-plain-wave-velocity-field-comparison-ru.pdf]]

**** Column 2
:PROPERTIES:
:BEAMER_col: 0.47
:END:

#+beamer: \vspace{-0.5cm}
#+header: :width 2.7 :height 1.3 :bg #F5F6F5 :font sans
#+begin_src R :file build/slides-large-and-small-amplitude-velocity-field-comparison-ru.pdf
source(file.path("R", "velocity-potentials.R"))
linetypes = c("solid", "dashed")
par(pty="s",mgp=c(3,0.3,0),mfrow=c(1,2),mar=c(1.5,1,0,0),cex=0.66,bty="n")
arma.plot_velocity(
  file.path("data", "velocity", "low-amp"),
  file.path("data", "velocity", "low-amp-0"),
  linetypes=linetypes,
  ylim=c(-2,2),
  axis_args=list(tck=-0.04),
  title_args=list(main="  Малая\n  амплитуда",outer=FALSE,adj=0,line=-1.5,cex.main=0.77),
  legend_x="bottomright"
)
arma.plot_velocity(
  file.path("data", "velocity", "high-amp"),
  file.path("data", "velocity", "high-amp-0"),
  linetypes=linetypes,
  ylim=c(-2,2),
  title_args=list(main="Большая\n амплитуда",outer=FALSE,adj=1,line=-1.5,cex.main=0.77),
  axis_args=list(tck=-0.04),
  legend_x="bottomright"
)
#+end_src

#+RESULTS:
[[file:build/slides-large-and-small-amplitude-velocity-field-comparison-ru.pdf]]


*** End column
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+header: :width 5.5 :height 1.3 :bg #F5F6F5 :font sans
#+begin_src R :file build/slides-irregular-wave-velocity-field-ru.pdf
source(file.path("R", "velocity-potentials.R"))
nlevels <- 41
levels <- pretty(c(-40,40), nlevels)
palette <- colorRampPalette(c("blue", "lightyellow", "red"))
col <- palette(nlevels-1)

par(mgp=c(3,0.2,0),mar=c(1.5,1,0,0),cex=0.66,bty="n")

# high-amplitude solver
arma.plot_velocity_potential_field(
  file.path("build", "arma-benchmarks", "verification", "velocity", "our-formula"),
  levels=levels,
  col=col,
  contour_lwd=0.5,
  zeta_lwd=1,
  sky_col='#F5F6F5',
  axis_args=list(tck=-0.02),
  x_max=40,
  z_min=-5,
  compare_to=file.path("build", "arma-benchmarks", "verification", "velocity", "linear"),
  points_args=list(col="black",bg="black",pch=21,cex=1.5),
  title_args=list(main="      Нерегулярное волнение",outer=FALSE,adj=0.01,line=-1.5,cex.main=0.77)
)
#+end_src

#+RESULTS:
[[file:build/slides-irregular-wave-velocity-field-ru.pdf]]


** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-potential-verification}

Чтобы оценить отличия полученного решения, оно было сопоставлено с известными
решениями.

Если сравнивать с решением из линейной теории волн (слева сверху), то для
синтетических волн большой амплитуды использование нового решения приводит к
смещению области, в которой сконцентрирована основная энергия волны ближе к
гребню.

Если сравнивать с решением для волн малых амплитуд (справа сверху), то новое
решение работает как для волн малых, так и больших амплитуд, а для волн
малых амплитуд можно говорить о рациональном соответствии между обоими
решениями.

Если сравнивать с решением из линейной теории волн (снизу), то для нерегулярного
волнения, воспроизведенного моделью АРСС, новое решение показывает в среднем на
20% большие значения потенциала скорости вблизи гребней волн.

* Программный комплекс

** Программная реализация
:PROPERTIES:
:BEAMER_act: <presentation>
:BEAMER_OPT: label=slide-implementation
:END:

#+begin_export latex
\mode<presentation>{%
\tikzset{Ann/.style={
	fill=none,
	baseline,
	font=\footnotesize\linespread{1}\selectfont,
}}%
\tikzset{Cube/.style={
	rectangle,
	text width=0.7cm,
	text height=0.7cm,
	draw=spbuDarkGray,
	fill=spbuWhite2,
	thick,
	font=\footnotesize\linespread{1}\selectfont,
	align=center,
	inner sep=0.5mm
}}%
\tikzset{CubeText/.style={
	fill=none,
	baseline,
	font=\footnotesize\linespread{1}\selectfont,
	inner sep=0mm
}}%
\tikzset{DataBlock/.style={
	rectangle,
	draw=spbuDarkGray,
	thick,
	text width=2cm,
	align=center,
	fill=spbuWhite2,
	font=\footnotesize\linespread{1}\selectfont,
	inner sep=1mm
}}%
\tikzset{Arrow/.style={
	very thick,
	arrows={-Triangle[length=0.25cm,width=0.125cm]},
	draw=spbuDarkGray
}}%
\tikzset{Dashed/.style={
	very thick,
	draw=spbuDarkGray2,
	dashed
}}%
\vspace{2cm}
\begin{tikzpicture}[x=3cm,y=1cm,remember picture]
% nodes
\node[DataBlock,text width=1.2cm] (umlACF) at (0,0)
	{АКФ};
\node[DataBlock,text width=2.6cm] (umlYW) at (1.1,0.8)
	{Коэффициенты АР};
\node[DataBlock,text width=2.6cm] (umlNonlin) at (1.1,-0.8)
	{Коэффициенты СС};
\node[DataBlock,text width=1.5cm] (umlAR) at (2.1,0.8)
	{Модель АР};
\node[DataBlock,text width=1.5cm] (umlMA) at (2.1,-0.8)
	{Модель СС};
\node[DataBlock,text width=1.5cm] (umlARMA) at (3.1,0)
	{Модель АРСС};
\node[DataBlock] (umlPres) at (4.1,0)
	{Давления};
% arrows
\path[Arrow] (umlACF.east) -- (umlYW.west);
\path[Arrow] (umlACF.east) -- (umlNonlin.west);
\path[Arrow] (umlYW.east) -- (umlAR.west);
\path[Arrow] (umlNonlin.east) -- (umlMA.west);
\path[Arrow] (umlAR.east) -- (umlARMA.west);
\path[Arrow] (umlMA.east) -- (umlARMA.west);
\path[Arrow] (umlARMA.east) -- (umlPres.west);
\end{tikzpicture}
#+end_export

#+begin_export latex
\begin{tikzpicture}[remember picture,overlay]
% cubes
\node[Cube,anchor=north west,yshift=-1.2cm,xshift=-3.5cm]
	(cube00) at (current page.north east) {};
\node[Cube,right=-0.5mm of cube00] (cube01) {};
\node[Cube,below=-0.5mm of cube00] (cube10) {};
\node[Cube,below=-0.5mm of cube01] (cube11) {};
% cube labels
\node[CubeText] (cubeLabel00) at (cube00) {A};
\node[CubeText] (cubeLabel01) at (cube01) {B};
\node[CubeText] (cubeLabel10) at (cube10) {C};
\node[CubeText] (cubeLabel11) at (cube11) {D};
% cube arrows
\path[Arrow] (cubeLabel01.west) -- (cubeLabel00.east);
\path[Arrow] (cubeLabel10.north) -- (cubeLabel00.south);
\path[Arrow] (cubeLabel11.north west) -- (cubeLabel00.south east);
\path[Arrow] (cubeLabel11.north) -- (cubeLabel01.south);
\path[Arrow] (cubeLabel11.west) -- (cubeLabel10.east);
\end{tikzpicture}
#+end_export

#+begin_export latex
\begin{tikzpicture}[remember picture,overlay]
% nodes
\node[Ann,anchor=north,below=of umlACF] (annACF)
	{Свертка (\(2\mathcal{F}\))};
\node[Ann,anchor=north,above=of umlYW] (annYW)
	{Симметричная СЛАУ};
\node[Ann,anchor=north,below=of umlNonlin] (annNonlin)
	{Метод простой итерации};
\node[Ann,anchor=north,below=of umlMA,yshift=\baselineskip] (annMA)
	{Свертка (\(3\mathcal{F}\))};
\node[Ann,anchor=north,below=of umlPres] (annPres)
	{Свертка (\(4\mathcal{F}\))};
\node[Ann,anchor=south,above=of umlAR,align=center,yshift=1.5\baselineskip] (annAR)
	{Мини-планировщик задач};
\node[Ann,anchor=north,below=1mm of cube11.south west,align=center] (annARdeps)
	{Авторегрессионные\\зависимости};
% arrows
\path[Dashed] (annACF.north -| umlACF.south) -- (umlACF.south);
\path[Dashed] (annNonlin.north -| umlNonlin.south) -- (umlNonlin.south);
\path[Dashed] (annYW.south -| umlYW.north) -- (umlYW.north);
\path[Dashed] (annAR.south) -- (umlAR.north);
\path[Dashed] (cube00.west |- annAR.east) -- (annAR.east);
\path[Dashed] (annMA.north -| umlMA.south) -- (umlMA.south);
\path[Dashed] (annPres.north -| umlPres.south) -- (umlPres.south);
\end{tikzpicture}
}
#+end_export

** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-implementation}

Программный комплекс состоит из программных реализаций модели АРСС и линейной
модели Лонге---Хиггинса и метода вычисления давлений. Для каждой модели и метода
написана параллельная реализация для систем с общей памятью.  Высокая
производительность обеспечивается параллельной реализацией каждой модели и
метода для систем с общей памятью и использованием быстрых преобразований Фурье,
где это возможно.

Программная реализация модели авторегрессии включает в себя планировщик задач,
который обеспечивает параллельную генерацию отдельных блоков, на которые
разделяется взволнованная поверхность, с учетом авторегрессионных зависимостей.
Сама формула модели сводится к вычислению большого количества полиномов, что
эффективно реализуется с помощью инструкций процессора FMA (Fused Multiply-Add).

Программная реализация модели Лонге---Хиггинса сводится к простому параллельному
суммированию гармоник в каждой точке поверхности.

Вычисление коэффициентов авторегрессии реализуется стандартным методом решения
систем линейных алгебраических уравнений с симметричными матрицами. Вычисление
коэффициентов скользящего среднего реализуется методом простой итерации.

Практически все остальные модели и методы используют быстрое преобразование
Фурье.
- Программная реализация модели скользящего среднего сводится к параллельной
  свертке на основе быстрых преобразований Фурье.
- Программная реализация вычисления давлений сводится к четырем быстрым
  преобразованиям Фурье с большим количеством трансцендентных математических
  функций.
- Вычисление автоковариационной функции сводится к трем быстрым преобразованиям
  Фурье.

** Система с общей памятью
:PROPERTIES:
:header-args:R: :results output raw :exports results
:BEAMER_act: <presentation>
:BEAMER_OPT: label=slide-smp
:END:

#+beamer: \small
#+header: :results output raw :exports results
#+name: tab-arma-performance
#+begin_src R :results output org :exports results
source(file.path("R", "benchmarks.R"))
options(arma.mark=",")
model_names <- list(
	ar.x="АР",
	ma.x="СС",
	lh.x="ЛХ",
	ar.y="АР",
	ma.y="СС",
	lh.y="ЛХ",
  Row.names="\\orgcmidrule{2-4}{5-6}Подпрограмма"
)
row_names <- list(
  determine_coefficients="Коэффициенты",
  validate="Сходимость",
  generate_surface="Поверхность",
  write_all="Вывод в файл",
  copy_to_host="Копирование с GPU",
  velocity="Давления"
)
arma.print_openmp_vs_opencl(model_names, row_names)
#+end_src

#+attr_latex: :booktabs t
#+RESULTS: tab-arma-performance

** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-smp}

На слайде представлены результаты тестирования производительности различных
компонент программного комплекса на системах с общей памятью с использованием
OpenMP (процессора) и OpenCL (видеокарты). Из таблицы видно, что
- большую часть времени система тратит на генерацию взволнованной поверхности,
- использование видеокарты выгодно только для модели Лонге---Хиггинса и
  вычисления давлений и
- модель авторегрессии более производительна, чем модель скользящего среднего,
  несмотря на использование быстрых преобразований Фурье.

** Система с распределенной памятью
:PROPERTIES:
:BEAMER_act: <presentation>
:BEAMER_OPT: label=slide-mpp
:END:

*** Columns
:PROPERTIES:
:BEAMER_env: columns
:BEAMER_opt: T
:END:

**** Column 1
:PROPERTIES:
:BEAMER_col: 0.37
:END:

#+beamer: \vspace{-1cm}
#+header: :width 2.3 :height 3 :bg #F5F6F5 :font sans
#+begin_src R :file build/slides-bscheduler-performance-ru.pdf
source(file.path("R", "benchmarks.R"))
par(mgp=c(1.5,0.4,0), mar=c(3.2,2.5,0.5,0.7), cex=0.7)
data <- arma.load_bscheduler_performance_data()
arma.plot_bscheduler_performance_data(
  data,
  list(
    openmp="OpenMP",
    bsc1="Bscheduler (один узел)",
    bsc2="Bscheduler (два узла)",
	openmp_args=list(lty="solid", lwd=2, col='#404040', pch=19),
	bsc1_args=list(lty="solid", lwd=2, col='#5353AC', pch=19),
	bsc2_args=list(lty="solid", lwd=2, col='#E57575', pch=19)
  )
)
title(xlab="Размер взволнованной поверхности", ylab="Время, сек.")
#+end_src

#+RESULTS:
[[file:build/slides-bscheduler-performance-ru.pdf]]

**** Column 2
:PROPERTIES:
:BEAMER_col: 0.57
:END:

#+beamer: \vspace{-1cm}
#+name: fig-master-slave-failure
#+header: :width 3 :height 3 :bg #F5F6F5 :font sans
#+begin_src R :file build/slides-master-slave-failure-ru.pdf
source(file.path("R", "benchmarks.R"))
par(mgp=c(1.5,0.4,0), mar=c(3,2.5,0.5,0.5), cex=0.7)
data <- arma.load_master_slave_failure_data()
arma.plot_master_slave_failure_data(
  data,
  list(
    master="Bscheduler (главный узел)",
    slave="Bscheduler (подчиненный узел)",
    nofailures="Bscheduler (без выхода из строя)",
	master_args=list(lty="solid", lwd=2, col='#E57575', pch=19),
	slave_args=list(lty="solid", lwd=2, col='#5353AC', pch=19),
	nofailures_args=list(lty="solid", lwd=2, col='#404040', pch=19)
  )
)
title(xlab="Размер взволнованной поверхности", ylab="Время, сек.")
#+end_src

#+RESULTS: fig-master-slave-failure
[[file:build/slides-master-slave-failure-ru.pdf]]

** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-mpp}

Для модели авторегрессии сделана реализация для систем с распределенной памятью
и отказоустойчивый планировщик задач. Планировщик позволяет добиться увеличения
производительности с увеличением количества узлов, которое близко к линейному
(график слева). Также планировщик позволяет продолжить вычисления, даже если
один из узлов кластера выходит из строя. При этом перезапускается только та
часть задачи, которая вычислялась на вышедшем из строя узле, и теряется 
производительность только этого узла.

* Заключение
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

** Заключение
:PROPERTIES:
:BEAMER_act: <presentation>
:BEAMER_OPT: label=slide-conclusion
:END:

- Разработана трехмерная модель для генерации волн произвольных амплитуд.
- Разработан метод вычисления поля давлений без предположений о малости амплитуд
  волн.
- Разработан программный комплекс для систем с общей и распределенной памятью.

** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-conclusion}

Цель исследования заключалась в изучении и разработке альтернативных
математических моделей и численных методов, которые бы позволили выйти за рамки
линейной теории волн в задаче имитационного моделирования морского волнения. В
рамках исследования были разработаны
- трехмерная модель для генерации волн произвольных амплитуд,
- метод вычисления поля давлений без предположений о малости амплитуд волн,
- программный комплекс для систем с общей и распределенной памятью.

** Апробация
:PROPERTIES:
:BEAMER_act: <presentation>
:BEAMER_OPT: label=slide-validation
:END:

- Конференции: ISSW'14, HPCS'15, HPCS'16, HPCS'17.
- Глава в книге /The Ocean in Motion/ (Springer Oceanography).

*** Columns
:PROPERTIES:
:BEAMER_env: columns
:BEAMER_opt: T
:END:

**** LAMP4
:PROPERTIES:
:BEAMER_col: 0.25
:BEAMER_env: block
:END:

#+ATTR_LATEX: :width \linewidth
[[file:graphics/slides/lamp4-ar-waves.png]]

**** Ascheduler
:PROPERTIES:
:BEAMER_col: 0.25
:BEAMER_env: block
:END:

#+ATTR_LATEX: :width \linewidth
[[file:graphics/slides/spark-logo.png]]

**** HPCS'15
:PROPERTIES:
:BEAMER_col: 0.25
:BEAMER_env: block
:END:

#+ATTR_LATEX: :width \linewidth
[[file:graphics/slides/hpcs-15-poster-paper-award.png]]

#+latex: \setbeamerfont{block title}{size=\normalsize}

** Notes
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:

#+beamer: \spbuSlide{slide-validation}

Доклады по теме диссертации были представлены на конференциях International Ship
Stability Workshop и High-Performance Computing & Simulation. По результатам
исследования опубликована глава в книге The Ocean in Motion.

Модель авторегрессии и метод вычисления давлений были интегрированы в
программный комплекс Large Amplitude Motion Program (LAMP4).

На основе отказоустойчивого планировщика задач был сделан аналог для фреймворка
обработки больших массивов данных Apache Spark.

Доклад на конференции HPCS'15 был признан лучшим устным докладом.

** Взволнованная морская поверхность					:noexport:
:PROPERTIES:
:BEAMER_act: <presentation>
:END:

#+begin_export latex
\begin{tikzpicture}[remember picture,overlay]
  \node[inner sep=0pt,rectangle] at (current page.center){%
    \includegraphics[width=0.95\paperwidth]{wavy}
  };%
\end{tikzpicture}
#+end_export

