#+TITLE: High-performance ocean wave simulation model for studying marine object behaviour
#+AUTHOR: Ivan Gankevich
#+DATE: St. Petersburg, 2016
#+LANGUAGE: en
#+LATEX_CLASS: gost
#+LATEX_CLASS_OPTIONS: [hidelinks,fontsize=14pt,paper=a4,pagesize,DIV=calc]
#+LATEX_HEADER_EXTRA: \input{preamble}
#+LATEX_HEADER_EXTRA: \organization{Saint Petersburg State University}
#+LATEX_HEADER_EXTRA: \manuscript{}
#+LATEX_HEADER_EXTRA: \degree{thesis for candidate of sciences degree}
#+LATEX_HEADER_EXTRA: \speciality{Speciality 05.13.18\\Mathematical modeling, numerical methods and programme complexes}
#+LATEX_HEADER_EXTRA: \supervisor{Supervisor\\Alexander Degtyarev}
#+LATEX_HEADER_EXTRA: \newcites{published}{Publications on the subject of thesis}
#+OPTIONS: todo:nil title:nil ':t H:5
#+STARTUP: indent

* Introduction
**** Topic relevance.
Software programmes, which simulates vessel behaviour in sea waves, are widely
used to model ship motion, estimate impact of external forces on floating
platform or other marine object, and estimate capsize probability under given
weather conditions; however, to model ocean waves most of the simulation codes
use linear wave theory
cite:shin2003nonlinear,van2007forensic,kat2001prediction,van2002development, in
the framework of which it is difficult to reproduce certain peculiarities of
wind wave climate. Among them are transition between normal and storm weather,
and sea composed of multiple wave systems --- both wind waves and swell ---
heading from multiple directions. Another shortcoming of linear wave theory is
an assumption, that wave amplitude is small compared to wave length. This makes
calculations imprecise when modelling ship motion in irregular waves, for which
the assumption does not hold. So, studying new and more advanced models and
methods for ocean simulation software may increase number of its application
scenarios and foster a study of ship motion in extreme conditions in particular.

**** State-of-the-art.
Autoregressive moving average (ARMA) model emerged in response to difficulties
encountered by practitioners who used wave simulation models developed in the
framework of linear wave theory. The problems they have encountered with
Longuet---Higgins model (a model which is entirely based on linear wave theory)
can be summarised as the following.
1. /Periodicity/. Linear wave theory approximates waves by a sum of harmonics,
   so period of the whole wavy surface realisation depends on the number of
   harmonics in the model. The more realisation size is, the more coefficients
   are required to eliminate periodicity, therefore, generation time grows
   non-linearly with realisation size. This in turn results in overall low
   efficiency of any model based on this theory, no matter how optimised the
   software implementation is.
2. /Linearity/. Linear wave theory gives mathematical definition for ocean waves
   which have small amplitudes compared to their lengths. Waves of this type
   occur mostly in the ocean, so near-shore waves as well as storm waves, for
   which this assumption does not hold, are not perfectly captured by linear
   theory.
3. /Probabilistic convergence/. Phase of a wave, which is often generated by
   pseudo random number generator (PRNG), has uniform distribution, and this
   makes wavy surface characteristics (average wave height, wave period, wave
   length etc.) sometimes converge slowly to the desired values. Convergence
   rate depends on the values generated by PRNG, so high convergence rate is not
   guaranteed.

These difficulties became a starting point in search for a new model which is
not based on linear wave theory. Autoregressive moving average (ARMA) process
studies were found to have all the required mathematical apparatus.
1. ARMA process takes auto-covariate function (ACF) as an input parameter, and
   this function can be directly obtained from wave energy or
   frequency-directional spectrum (which is the input for Longuet---Higgins
   model). So, inputs for one model can easily be converted to each other.
2. There is no small-amplitude waves assumption. Wave may have any amplitude,
   and can be generated as steep as it is possible with real ocean wave ACF.
3. Period of the realisation equals the period of PRNG, so generation time grows
   linearly with the realisation size.
4. White noise --- the only probabilistic term in ARMA process --- has
   Gaussian distribution; so, convergence rate is not probabilistic.

**** Goals and objectives.
ARMA process became the basis for ARMA ocean simulation model, however, there
was still much work to be done to make it useful in practice.
1. One have to investigate how different ACF shapes affect the choice of ARMA
   parameters (the number of moving average and autoregressive processes
   coefficients).
2. Then, investigate a possibility to generate waves of arbitrary profile, not
   only cosines (which means taking into account asymmetric distribution of wavy
   surface elevation).
3. Then, derive formulae to determine pressure field under wavy surface.
   Usually, such formulae are derived for a particular model by substituting
   wave profile into the eq. eqref:eq:problem, however, ARMA process does not
   provide explicit wave profile formula, so this problem had to be solved for
   general wavy surface (which is not defined by an analytic formula),
   without linearisation of boundaries and assumption of small-amplitude waves.
4. Finally, verify wavy surface integral characteristics to match the ones of
   real ocean waves.
5. In the final stage, develop software programme that implements ARMA model and
   pressure calculation method, and allows running simulations on both shared
   memory (SMP) and distributed memory (MPP) computer systems.

**** Scientific novelty.
ARMA model, as opposed to other ocean simulation models, does not use linear
wave theory. This makes it capable of
- generating waves with arbitrary amplitudes by adjusting wave steepness via
  ACF;
- generating waves with arbitrary profiles by adjusting asymmetry of wave
  elevation distribution via non-linear inertia-less transform (NIT).
This makes it possible to use ARMA process to model transition between normal
and storm weather taking into account climate spectra and assimilation data of a
particular ocean region, which is not possible with models based on linear wave
theory.

**** Theoretical and practical significance.
Implementing ARMA model, that does not use assumptions of linear wave theory,
will increase quality of ship motion and marine object behaviour simulation
software.

1. Since pressure field formula is derived for discrete wavy surface and without
   assumptions about wave amplitudes, it is applicable to any wavy surface of
   incompressible inviscid fluid (in particular, it is applicable to wavy
   surface generated by LH model). This allows using pressure field formula
   without being tied to ARMA model.
2. From computational point of view this formula is more efficient than the
   corresponding formula for LH model, because integrals in it are reduced to
   Fourier transforms, for which there is fast Fourier transform (FFT) family of
   algorithms, optimised for different processor architectures.
3. Since the formula is explicit, there is no need in data exchange between
   parallel processes, which allows to achieve high scalability on computer
   clusters.
4. Finally, ARMA model is itself more efficient than LH model due to vicinity of
   trigonometric functions in its formula: In fact, wavy surface is computed as
   a sum of large number of polynomials, for which there is low-level assembly
   instruction (Fused Multiply-Add) giving native performance on CPUs.

**** Methodology and research methods.
Software implementation of ARMA model and pressure field formula was created
incrementally: a prototype written in high-level engineering language
cite:mathematica10,octave2015 was rewritten in lower level language (C++).
Implementation of the same algorithm and formulae in languages of varying
levels (which involves usage of different abstractions and language primitives)
allows correcting errors, which would left unnoticed otherwise. Wavy surface,
generated by ARMA model, as well as all input parameters (ACF, distribution of
wave elevation etc.) were inspected via graphical means built into the
programming language allowing visual control of programme correctness.

**** Theses for the defence.
- Wind wave model which allows generating wavy surface realisations with large
  period and consisting of wave of arbitrary amplitudes;
- Pressure field formulae derived for this model without assumptions of linear
  wave theory;
- Software implementation of the model and the formula for shared memory (SMP)
  and distributed memory (MPP) systems.

**** Results verification and approbation.
ARMA model is verified by comparing generated wavy surface integral
characteristics (distribution of wave elevation, wave heights and lengths etc.)
to the ones of real ocean waves. Pressure field formula is derived in
Mathematica language, where resulting formulae are verified by built-in
graphical means.

ARMA model and pressure field formula were incorporated into Large Amplitude
Motion Programme (LAMP) --- an ship motion simulation software programme ---
where they were compared to previously used LH model. Preliminary numerical
experiments showed higher computational efficiency of ARMA model.

* Problem statement
The aim of the study reported here is to investigate possibilities of applying
ARMA process mathematical apparatus to ocean wave modelling and to derive formula
for pressure field under generated wavy surface without assumptions of linear
wave theory.
- In case of small-amplitude waves resulting formula must correspond to the
  one from linear wave theory; in all other cases the formula must not diverge.
- Integral characteristics of generated wavy surface must match the ones of real
  ocean waves.
- Software implementation of ARMA model and pressure field formula must work on
  shared memory (SMP) and distributed memory (MPP) systems.

**** Pressure field formula.
The problem of finding pressure field under wavy sea surface represents inverse
problem of hydrodynamics for incompressible inviscid fluid. System of equations
for it in general case is written as cite:kochin1966theoretical
\begin{align}
    & \nabla^2\phi = 0,\nonumber\\
    & \phi_t+\frac{1}{2} |\vec{\upsilon}|^2 + g\zeta=-\frac{p}{\rho}, & \text{на }z=\zeta(x,y,t),\label{eq:problem}\\
    & D\zeta = \nabla \phi \cdot \vec{n}, & \text{на }z=\zeta(x,y,t),\nonumber
\end{align}
where $\phi$ --- velocity potential, $\zeta$ --- elevation ($z$ coordinate) of
wavy surface, $p$ --- wave pressure, $\rho$ --- fluid density, $\vec{\upsilon} =
(\phi_x, \phi_y, \phi_z)$ --- velocity vector, $g$ --- acceleration of gravity,
and $D$ --- substantial (Lagrange) derivative. The first equation is called
continuity (Laplace) equation, the second one is the conservation of momentum
law (the so called dynamic boundary condition); the third one is
kinematic boundary condition for free wavy surface, which states that rate of
change of wavy surface elevation ($D\zeta$) equals to the change of velocity
potential derivative along the wavy surface normal ($\nabla \phi \cdot
\vec{n}$).

Inverse problem of hydrodynamics consists in solving this system of equations
for $\phi$. In this formulation dynamic boundary condition becomes explicit
formula to determine pressure field using velocity potential derivatives
obtained from the remaining equations. So, from mathematical point of view
inverse problem of hydrodynamics reduces to Laplace equation with mixed boundary
condition --- Robin problem.

* Related work
** Ocean wave models analysis
Pressure computation is only possible when the shape of wavy surface is known.
It is defined either at discrete grid points, or continuously via some analytic
formula. As will be shown in section [[#linearisation]], such formula may simplify
pressure computation by effectively reducing the task to pressure field
generation, instead of wavy surface generation.

*** Longuet---Higgins model
The simplest model, formula of which is derived in the framework of linear wave
theory, is Longuet---Higgins (LH) model cite:longuet1957statistical. In-depth
comparative analysis of this model and ARMA model is done in
cite:degtyarev2011modelling,boukhanovsky1997thesis.

LH model represents ocean wavy surface as a superposition of
sine waves with random amplitudes $c_n$ and phases $\epsilon_n$, continuously
distributed on interval $[0,2\pi]$. Wavy surface elevation ($z$ coordinate) is
defined by
#+name: eq:longuet-higgins
\begin{equation}
    \zeta(x,y,t) = \sum\limits_n c_n \cos(u_n x + v_n y - \omega_n t + \epsilon_n).
\end{equation}
Here wave numbers $(u_n,v_n)$ are continuously distributed on plane $(u,v)$,
i.e. area $du \times dv$ contains infinite quantity of wave numbers. Frequency
is related to wave numbers via dispersion relation $\omega_n=\omega(u_n,v_n)$.
Function $\zeta(x,y,t)$ is a three-dimensional ergodic stationary homogeneous
Gaussian process defined by
\begin{equation*}
    2E_\zeta(u,v)\, du\,  dv = \sum\limits_n c_n^2,
\end{equation*}
where $E_\zeta(u,v)$ --- two-dimensional wave energy spectral density.
Coefficients $c_n$ are derived from wave energy spectrum $S(\omega)$ via
\begin{equation*}
    c_n = \sqrt{ \textstyle\int\limits_{\omega_n}^{\omega_{n+1}} S(\omega) d\omega}.
\end{equation*}

*** Disadvantages of Longuet-Higgins model
Although LH model is simple and easy to understand, there are shortcomings that
appear in practice.

1. The model simulates only stationary Gaussian process. This is consequence of
   central limit theorem (CLT): sum of large number of sines with random
   amplitudes and phases has normal distribution, no matter what spectrum is
   used as the model input. Using lower number of coefficients may solve the
   problem, but also make realisation period smaller. So, using LH model to
   simulate waves with non-Gaussian distribution of elevation --- a distribution
   which real ocean waves have cite:huang1980experimental,рожков1996теория ---
   is impractical.
2. From computational point of view, the deficiency of the model is non-linear
   increase of wavy surface generation time with the increase of realisation
   size. The larger the size of the realisation, the higher number of
   coefficients (discrete points of frequency-directional spectrum) is needed to
   eliminate periodicity. This makes LH model inefficient for long-time
   simulations.
3. Finally, there are peculiearities which make LH model unsuitable base for
   building more advanced simulation models.
   - In software implementation convergence rate of ([[eq:longuet-higgins]]) may be
     low due to randomness of phases $\epsilon_n$.
   - It is difficult to generalise LH model for non-Gaussian processes as it
     involves incorporating non-linear terms in ([[eq:longuet-higgins]]) for which
     there is no known formula to determine coefficients
     cite:рожков1990вероятностные.

To summarise, LH model is linear, computationally inefficient for long-time
simiualtions, and difficult to use as a base for more advanced models.

*** ARMA model
In cite:spanos1982arma ARMA model is used to generate time series spectrum of
which is compatible with Pierson---Moskowitz (PM) approximation of ocean wave
spectrum. The authors carry out experiments for one-dimensional AR, MA and ARMA
models. They mention excellent agreement between target and initial spectra and
higher performance of ARMA model compared to models based on summing large
number of harmonic components with random phases. The also mention that in order
to reach agreement between target and initial spectrum MA model require lesser
number of coefficients than AR model. In cite:spanos1996efficient the authors
generalise ARMA model coefficients determination formulae for multi-variate
(vector) case.

One thing that distinguishes present work with respect to afore-mentioned ones
is the study of three-dimensional (2D in space and 1D in time) ARMA model, which
is mostly a different problem.
1. Yule---Walker system of equations, which are used to determine AR
   coefficients, has complex block-block structure.
2. Optimal model order (in a sense that target spectrum agrees with initial) is
   determined manually.
3. Instead of PM spectrum, analytic formulae for standing and propagating
   waves ACF are used as the model input.
4. Three-dimensional wavy surface should be compatible with real ocean surface
   not only in terms of spectral characteristics, but also in the shape of wave
   profiles. So, model verification includes distributions of various parameters
   of generated waves (lengths, heights, periods etc.).
Multi-dimensionality of investigated model not only complexifies the task, but
also allows carrying out visual validation of generated wavy surface. It is the
opportunity to visualise output of the programme that allowed to ensure that
generated surface is compatible with real ocean surface, and is not abstract
multi-dimensional stochastic process that is real only statistically.

** Pressure field determination formulae
*** Small amplitude waves theory
In cite:stab2012,детярев1998моделирование,degtyarev1997analysis the authors
propose a solution for inverse problem of hydrodynamics of potential flow in the
framework of small-amplitude wave theory (under assumption that wave length is
much larger than height: $\lambda \gg h$). In that case inverse problem is
linear and reduces to Laplace equation with mixed boundary conditions, and
equation of motion is solely used to determine pressures for calculated velocity
potential derivatives. The assumption of small amplitudes means the slow decay
of wind wave coherence function, i.e. small change of local wave number in time
and space compared to the wavy surface elevation ($z$ coordinate). This
assumption allows calculating elevation $z$ derivative as $\zeta_z=k\zeta$,
where $k$ is wave number. In two-dimensional case the solution is written
explicitly as
\begin{align}
    \left.\frac{\partial\phi}{\partial x}\right|_{x,t}= &
        -\frac{1}{\sqrt{1+\alpha^{2}}}e^{-I(x)}
            \int\limits_{0}^x\frac{\partial\dot{\zeta}/\partial
                z+\alpha\dot{\alpha}}{\sqrt{1+\alpha^{2}}}e^{I(x)}dx,\label{eq:old-sol-2d}\\
    I(x)= & \int\limits_{0}^x\frac{\partial\alpha/\partial z}{1+\alpha^{2}}dx,\nonumber
\end{align}

where $\alpha$ is wave slope. In three-dimensional case solution is written in
the form of elliptic partial differential equation (PDE):
\begin{align*}
    & \frac{\partial^2 \phi}{\partial x^2} \left( 1 + \alpha_x^2 \right) +
    \frac{\partial^2 \phi}{\partial y^2} \left( 1 + \alpha_y^2 \right) +
    2\alpha_x\alpha_y \frac{\partial^2 \phi}{\partial x \partial y} + \\
    & \left(
        \frac{\partial \alpha_x}{\partial z} +
        \alpha_x \frac{\partial \alpha_x}{\partial x} +
        \alpha_y \frac{\partial \alpha_x}{\partial y}
    \right) \frac{\partial \phi}{\partial x} + \\
    & \left(
        \frac{\partial \alpha_y}{\partial z} +
        \alpha_x \frac{\partial \alpha_y}{\partial x} +
        \alpha_y \frac{\partial \alpha_y}{\partial y}
    \right) \frac{\partial \phi}{\partial y} + \\
    & \frac{\partial \dot{\zeta}}{\partial z} +
    \alpha_x \dot{\alpha_x} + \alpha_y \dot{\alpha_y} = 0.
\end{align*}
The authors suggest transforming this equation to finite differences and solve
it numerically.

As will be shown in [[#sec:compare-formulae]] that eqref:eq:old-sol-2d diverges when
attempted to calculate velocity field for large-amplitude waves, and this is the
reason that it can not be used together with ARMA model, that generates
arbitrary-amplitude waves.

*** Linearisation of boundary condition
:PROPERTIES:
:CUSTOM_ID: linearisation
:END:

LH model allows deriving an explicit formula for velocity field by linearising
kinematic boundary condition. Velocity potential formula is written as
\begin{equation*}
\phi(x,y,z,t) = \sum_n \frac{c_n g}{\omega_n}
     e^{\sqrt{u_n^2+v_n^2} z}
     \sin(u_n x + v_n y - \omega_n t + \epsilon_n).
\end{equation*}
This formula is differentiated to obtain velocity potential derivatives, which
are plugged to dynamic boundary condition to obtain pressures.

* ARMA model for ocean wave simulation
** Governing equations for 3-dimensional ARMA process
*** Three possible processes
ARMA ocean simulation model defines ocean wavy surface as three-dimensional (two
dimensions in space and one in time) autoregressive moving average process:
every surface point is represented as a weighted sum of previous in time and
space points plus weighted sum of previous in time and space normally
distributed random impulses. The governing equation for 3-D ARMA process is
\begin{equation}
    \zeta_{\vec i}
    =
    \sum\limits_{\vec j = \vec 0}^{\vec N}
    \Phi_{\vec j} \zeta_{\vec i - \vec j}
    +
    \sum\limits_{\vec j = \vec 0}^{\vec M}
    \Theta_{\vec j} \epsilon_{\vec i - \vec j}
    ,
    \label{eq:arma-process}
\end{equation}
where $\zeta$ --- wave elevation, $\Phi$ --- AR process coefficients, $\Theta$
--- MA process coefficients, $\epsilon$ --- white noise with Gaussian
distribution, $\vec N$ --- AR process order, $\vec M$ --- MA process order, and
$\Phi_{\vec 0} \equiv 0$, $\Theta_{\vec 0} \equiv 0$. Here arrows denote
multi-component indices with a component for each dimension. In general, any
scalar quantity can be a component (temperature, salinity, concentration of some
substance in water etc.). Equation parameters are AR and MA process coefficients
and order.

**** Autoregressive (AR) process.
AR process is ARMA process with only one random impulse instead of theirs
weighted sum:
\begin{equation}
    \zeta_{\vec i}
    =
    \sum\limits_{\vec j = \vec 0}^{\vec N}
    \Phi_{\vec j} \zeta_{\vec i - \vec j}
    +
    \epsilon_{i,j,k}
    .
    \label{eq:ar-process}
\end{equation}
The coefficients $\Phi$ are calculated from ACF via three-dimensional
Yule---Walker equations, which are obtained after multiplying both parts of the
previous equation by $\zeta_{\vec{i}-\vec{k}}$ and computing the expected value.
Generic form of YW equations is
\begin{equation}
    \label{eq:yule-walker}
    \gamma_{\vec k}
    =
    \sum\limits_{\vec j = \vec 0}^{\vec N}
    \Phi_{\vec j}
    \text{ }\gamma_{\vec{k}-\vec{j}}
    +
    \Var{\epsilon} \delta_{\vec{k}},
    \qquad
    \delta_{\vec{k}} =
    \begin{cases}
        1, \quad \text{if } \vec{k}=0 \\
        0, \quad \text{if } \vec{k}\neq0,
    \end{cases}
\end{equation}
where $\gamma$ --- ACF of process $\zeta$, $\Var{\epsilon}$ --- white noise
variance. Matrix form of three-dimensional YW equations, which is used in the
present work, is
\begin{equation*}
    \Gamma
    \left[
        \begin{array}{l}
            \Phi_{\vec 0}\\
            \Phi_{0,0,1}\\
            \vdotswithin{\Phi_{\vec 0}}\\
            \Phi_{\vec N}
        \end{array}
    \right]
    =
    \left[
        \begin{array}{l}
            \gamma_{0,0,0}-\Var{\epsilon}\\
            \gamma_{0,0,1}\\
            \vdotswithin{\gamma_{\vec 0}}\\
            \gamma_{\vec N}
        \end{array}
    \right],
    \qquad
    \Gamma=
    \left[
        \begin{array}{llll}
            \Gamma_0 & \Gamma_1 & \cdots & \Gamma_{N_1} \\
            \Gamma_1 & \Gamma_0 & \ddots & \vdotswithin{\Gamma_0} \\
            \vdotswithin{\Gamma_0} & \ddots & \ddots & \Gamma_1 \\
            \Gamma_{N_1} & \cdots & \Gamma_1 & \Gamma_0
        \end{array}
    \right],
\end{equation*}
where $\vec N = \left( p_1, p_2, p_3 \right)$ and
\begin{equation*}
    \Gamma_i =
    \left[
    \begin{array}{llll}
        \Gamma^0_i & \Gamma^1_i & \cdots & \Gamma^{N_2}_i \\
        \Gamma^1_i & \Gamma^0_i & \ddots & \vdotswithin{\Gamma^0_i} \\
        \vdotswithin{\Gamma^0_i} & \ddots & \ddots & \Gamma^1_i \\
        \Gamma^{N_2}_i & \cdots & \Gamma^1_i & \Gamma^0_i
    \end{array}
    \right]
    \qquad
    \Gamma_i^j=
    \left[
    \begin{array}{llll}
        \gamma_{i,j,0} & \gamma_{i,j,1} & \cdots & \gamma_{i,j,N_3} \\
        \gamma_{i,j,1} & \gamma_{i,j,0} & \ddots &x \vdotswithin{\gamma_{i,j,0}} \\
        \vdotswithin{\gamma_{i,j,0}} & \ddots & \ddots & \gamma_{i,j,1} \\
        \gamma_{i,j,N_3} & \cdots & \gamma_{i,j,1} & \gamma_{i,j,0}
    \end{array}
    \right],
\end{equation*}
Since $\Phi_{\vec 0}\equiv0$, the first row and column of $\Gamma$ can be
eliminated. Matrix $\Gamma$ is block-toeplitz, positive definite and symmetric,
hence the system is efficiently solved by Cholesky decomposition, which is
particularly suitable for these types of matrices.

After solving this system of equations white noise variance is estimated from
eqref:eq:yule-walker by plugging $\vec k = \vec 0$:
\begin{equation*}
    \Var{\epsilon} =
    \Var{\zeta}
    -
    \sum\limits_{\vec j = \vec 0}^{\vec N}
    \Phi_{\vec j}
    \text{ }\gamma_{\vec{j}}.
\end{equation*}

**** Moving average (MA) process.
MA process is ARMA process with $\Phi\equiv0$:
\begin{equation}
    \zeta_{\vec i}
    =
    \sum\limits_{\vec j = \vec 0}^{\vec M}
    \Theta_{\vec j} \epsilon_{\vec i - \vec j}
    .
    \label{eq:ma-process}
\end{equation}
MA coefficients $\Theta$ are defined implicitly via the following non-linear
system of equations:
\begin{equation*}
  \gamma_{\vec i} =
	\left[
		\displaystyle
    \sum\limits_{\vec j = \vec i}^{\vec M}
    \Theta_{\vec j}\Theta_{\vec j - \vec i}
	\right]
  \Var{\epsilon}.
\end{equation*}
The system is solved numerically by fixed-point iteration method via the
following formulae
\begin{equation*}
  \Theta_{\vec i} =
    -\frac{\gamma_{\vec 0}}{\Var{\epsilon}}
		+
    \sum\limits_{\vec j = \vec i}^{\vec M}
    \Theta_{\vec j} \Theta_{\vec j - \vec i}.
\end{equation*}
Here coefficients $\Theta$ are calculated from back to front: from
$\vec{i}=\vec{M}$ to $\vec{i}=\vec{0}$. White noise variance is estimated by
\begin{equation*}
    \Var{\epsilon} = \frac{\gamma_{\vec 0}}{
		1
		+
    \sum\limits_{\vec j = \vec 0}^{\vec M}
    \Theta_{\vec j}^2
    }.
\end{equation*}
Authors of cite:box1976time suggest using Newton---Raphson method to solve this
equation with higher precision, however, this method does not work in three
dimensions. Using slower method does not have dramatic effect on the overall
programme performance, because the number of coefficients is small and most of
the time is spent generating wavy surface.

**** TODO Stationarity and invertibility of AR and MA processes
**** Mixed autoregressive moving average (ARMA) process.
:PROPERTIES:
:CUSTOM_ID: sec:how-to-mix-ARMA
:END:
Generally speaking, ARMA process is obtained by plugging MA generated wavy
surface as random impulse to AR process, however, in order to get the process
with desired ACF one should re-compute AR coefficients before plugging. There
are several approaches to "mix" AR and MA processes.
- The approach proposed in cite:box1976time which involves dividing ACF into MA
  and AR part along each dimension is not applicable here, because in three
  dimensions such division is not possible: there always be parts of the ACF
  that are not taken into account by AR and MA process.
- The alternative approach is to use the same (undivided) ACF for both AR and MA
  processes but use different process order, however, then realisation
  characteristics (mean, variance etc.) become skewed: these are characteristics
  of the two overlapped processes.
For the first approach there is a formula to re-compute ACF for AR process, but
there is no such formula for the second approach. So, the best solution for now
is to simply use AR and MA process exclusively.

*** Process selection criteria for different wave profiles
One problem of ARMA model application to ocean wave generation is that for
different types of wave profiles different processes /must/ be used: standing
waves are modelled by AR process, and propagating waves by MA process. This
statement comes from practice: if one tries to use the processes the other way
round, the resulting realisation either diverges or does not correspond to real
ocean waves. (The latter happens for non-invertible MA process, as it is always
stationary.) So, the best way to apply ARMA model to ocean wave generation is to
use AR process for standing waves and MA process for progressive waves.

The other problem is inability to automatically determine optimal number of
coefficients for three-dimensional AR and MA processes. For one-dimensional
processes this can be achieved via iterative methods cite:box1976time, but they
diverge in three-dimensional case.

The final problem, which is discussed in [[#sec:how-to-mix-ARMA]], is inability to
"mix" AR and MA process in three dimensions.

In practice some statements made for AR and MA processes in cite:box1976time
should be flipped for three-dimensional case. For example, the authors say that
ACF of MA process cuts at $q$ and ACF of AR process decays to nought infinitely,
but in practice making ACF of 3-dimensional MA process not decay results in it
being non-invertible and producing realisation that does not look like real
ocean waves, whereas doing the same for ACF of AR process results in stationary
process and adequate realisation. Also, the authors say that one
should allocate the first $q$ points of ACF to MA process (as it often needed to
describe the peaks in ACF) and leave the rest points to AR process, but in
practice in case of ACF of a propagating wave AR process is stationary only for
the first time slice of the ACF, and the rest is left to MA process.

To summarise, the only established scenario of applying ARMA model to ocean wave
generation is to use AR process for standing waves and MA process for
propagating waves. With new formulae for 3 dimensions a single mixed ARMA
process might increase model precision, which is one of the objectives of the
future research.

** Modelling non-linearity of ocean waves
ARMA model allows modelling asymmetry of wave elevation distribution, i.e.
generate ocean waves, distribution of z-coordinate of which has non-nought
kurtosis and asymmetry. Such distribution is inherent to real ocean waves
cite:longuet1963nonlinear.

Wave asymmetry is modelled by non-linear inertia-less transform (NIT) of
stochastic process, however, transforming resulting wavy surface means
transforming initial ACF. In order to alleviate this, ACF must be preliminary
transformed as shown in cite:boukhanovsky1997thesis.

**** Wavy surface transformation.
Explicit formula $z=f(y)$ that transforms wavy surface to desired
one-dimensional distribution $F(z)$ is the solution of non-linear transcendental
equation $F(z)=\Phi(y)$, where $\Phi(y)$ --- one-dimensional Gaussian
distribution. Since distribution of wave elevation is often given by some
approximation based on field data, this equation is solved numerically with
respect to $z_k$ in each grid point $y_k|_{k=0}^N$ of generated wavy surface. In
this case equation is rewritten as
\begin{equation}
    \label{eq:distribution-transformation}
    F(z_k)
    =
    \frac{1}{\sqrt{2\pi}}
    \int\limits_0^{y_k} \exp\left[ -\frac{t^2}{2} \right] dt
    .
\end{equation}
Since, distribution functions are monotonic, the simplest interval halving
(bisection) numerical method is used to solve this equation.

**** Preliminary ACF transformation.
In order to transform ACF $\gamma_z$ of the process, it should be expanded in
series of Hermite polynomials (Gram---Charlier series)
\begin{equation*}
    \gamma_z \left( \vec u \right)
    =
    \sum\limits_{m=0}^{\infty}
    C_m^2 \frac{\gamma_y^m \left( \vec u \right)}{m!},
\end{equation*}
where
\begin{equation*}
    C_m = \frac{1}{\sqrt{2\pi}}
  \int\limits_{0}^\infty
    f(y) H_m(y) \exp\left[ -\frac{y^2}{2} \right],
\end{equation*}
$H_m$ --- Hermite polynomial, and $f(y)$ --- solution to equation
eqref:eq:distribution-transformation. Plugging polynomial approximation
$f(y)\approx\sum\limits_{i}d_{i}y^i$ and analytic formulae for Hermite
polynomial yields
\begin{equation*}
    \frac{1}{\sqrt{2\pi}}
    \int\limits_\infty^\infty
    y^k \exp\left[ -\frac{y^2}{2} \right]
    =
    \begin{cases}
        (k-1)!! & \text{if }k\text{ is even},\\
        0       & \text{if }k\text{ is odd},
    \end{cases}
\end{equation*}
which simplifies the former equation. Optimal number of coefficients $C_m$ is
determined by computing them sequentially and stopping when variances of both
fields become equal with desired accuracy $\epsilon$:
\begin{equation*}
    \left| \Var{z} - \sum\limits_{k=0}^m
    \frac{C_k^2}{k!} \right| \leq \epsilon.
\end{equation*}

In cite:boukhanovsky1997thesis the author suggests using polynomial
approximation $f(y)$ also for wavy surface transformation, however, in practice
ocean surface realisation often contains points, where z-coordinate is beyond
the limits of the approximation, which makes solution wrong. In these points it
is more efficient to solve equation eqref:eq:distribution-transformation by
bisection method. Using the same approximation in Gram---Charlier series does
not lead to such errors.

** Determining wave pressures for discretely given wavy surface
Analytic solutions to boundary problems in classical equations are often used to
study different properties of the solution, and for that purpose general
solution formula is too difficult to study, as it contains integrals of unknown
functions. Fourier method is one of the methods to find analytic solutions to
PDE. It is based on application of Fourier transform to each part of PDE, which
reduces the equation to algebraic, and the solution is written as inverse
Fourier transform of some function (which may contain Fourier transforms of
other functions). Since, it is not possible to write analytic forms of these
Fourier transforms in all cases, unique solutions are found and their behaviour
is studied in different domains instead. At the same time, computing discrete
Fourier transforms on the computer is possible for any discretely defined
function and efficient when using FFT algorithms. These algorithms use symmetry
of complex exponentials to decrease asymptotic complexity from
$\mathcal{O}(n^2)$ to $\mathcal{O}(n\log_{2}n)$. So, even if general solution
contains Fourier transforms of unknown functions, they still can be computed
numerically, and FFT family of algorithms makes this approach efficient.

Alternative approach to solve PDE is to reduce it to difference equations, which
are solved by constructing various numerical schemes. This approach leads to
approximate solution, and asymptotic complexity of corresponding algorithms is
comparable to that of FFT. For example, stationary elliptic PDE transforms to
implicit numerical scheme which is solved by iterative method on each step of
which a tridiagonal of five-diagonal system of algebraic equations is solved by
Thomas algorithm. Asymptotic complexity of this approach is
$\mathcal{O}({n}{m})$, where $n$ --- number of wavy surface grid points, $m$ ---
number of iterations. Despite their wide spread, iterative algorithms are
inefficient on parallel computer architectures; in particular, their mapping to
co-processors may involve copying data in and out of the co-processor in each
iteration, which negatively affects their performance. At the same time, high
number of Fourier transforms in the solution is an advantage, rather than a
disadvantage. First, solutions obtained by Fourier method are explicit, hence
their implementations scales with the large number of parallel computer cores.
Second, there are implementations of FFT optimised for different processor
architectures as well as co-processors (GPU, MIC) which makes it easy to get
high performance on any computing platform. These advantages substantiate the
choice of Fourier method to obtain explicit analytic solution to the problem of
determining pressures under wavy ocean surface.

*** Two-dimensional velocity field
:PROPERTIES:
:CUSTOM_ID: sec:pressure-2d
:END:
**** Formula for infinite depth fluid.
Two-dimensional Laplace equation with Robin boundary condition is written as
\begin{align}
    \label{eq:problem-2d}
    & \phi_{xx}+\phi_{zz}=0,\\
    & \zeta_t + \zeta_x\phi_x = \frac{\zeta_x}{\sqrt{1 + \zeta_x^2}} \phi_x - \phi_z, & \text{на }z=\zeta(x,t).\nonumber
\end{align}
Use Fourier method to solve this problem. Applying Fourier transform to both
sides of the equation yields
\begin{equation*}
    -4 \pi^2 \left( u^2 + v^2 \right)
    \FourierY{\phi(x,z)}{u,v} = 0,
\end{equation*}
hence $v = \pm i u$. Hereinafter we use the following symmetric form of Fourier
transform:
\begin{equation*}
    \FourierY{f(x,y)}{u,v} =
    \iint\limits_{-\infty}^{\phantom{--}\infty}
    f(x,y)
    e^{-2\pi i (x u + y v)}
    dx dy
\end{equation*}
We seek solution in the form of inverse Fourier transform
$\phi(x,z)=\InverseFourierY{E(u,v)}{x,z}$. Plugging[fn::$v={-i}{u}$ is not
applicable because velocity potential must go to nought when depth goes to
infinity.] $v={i}{u}$ into the formula yields
\begin{equation}
    \label{eq:guessed-sol-2d}
    \phi(x,z) = \InverseFourierY{e^{2\pi u z}E(u)}{x}.
\end{equation}
In order to make substitution $z=\zeta(x,t)$ not interfere with Fourier
transforms, we rewrite eqref:eq:guessed-sol-2d as a convolution:
\begin{equation*}
    \phi(x,z)
    =
    \Fun{z}
    \ast
    \InverseFourierY{E(u)}{x},
\end{equation*}
where $\Fun{z}$ --- a function, form of which is defined in section
[[#sec:compute-delta]] and which satisfies equation
$\FourierY{\Fun{z}}{u}=e^{2\pi{u}{z}}$. Plugging formula $\phi$ into the boundary
condition yields
\begin{equation*}
    \zeta_t
    =
    \left( i f(x) - 1 \right)
    \left[
        \Fun{z}
        \ast
        \InverseFourierY{2\pi u E(u)}{x}
    \right],
\end{equation*}
where $f(x)={\zeta_x}/{\sqrt{1+\zeta_x^2}}-\zeta_x$. Applying Fourier transform
to both sides of this equation yields formula for coefficients $E$:
\begin{equation*}
    E(u) =
    \frac{1}{2\pi u}
    \frac{
    \FourierY{\zeta_t / \left(i f(x) - 1\right)}{u}
    }{
    \FourierY{\Fun{z}}{u}
    }
\end{equation*}
Finally, substituting $z$ for $\zeta(x,t)$ and plugging resulting equation into
eqref:eq:guessed-sol-2d yields formula for $\phi(x,z)$:
\begin{equation}
    \label{eq:solution-2d}
    \boxed{
        \phi(x,z)
        =
        \InverseFourierY{
            \frac{e^{2\pi u z}}{2\pi u}
            \frac{
            \FourierY{ \zeta_t / \left(i f(x) - 1\right) }{u}
            }{
            \FourierY{ \Fun{\zeta(x,t)} }{u}
            }
        }{x}.
    }
\end{equation}

Multiplier $e^{2\pi{u}{z}}/(2\pi{u})$ makes graph of a function to which Fourier
transform of which is applied asymmetric with respect to $OY$ axis. This makes
it difficult to apply FFT which expects periodic function with nought on both
ends of the interval. Using numerical integration instead of FFT is not faster
than solving the initial system of equations with numerical schemes. This
problem is alleviated by using formula eqref:eq:solution-2d-full for finite
depth fluid with wittingly large depth $h$. This formula is derived in the
following section.

**** Formula for finite depth fluid.
On the sea bottom vertical fluid velocity component equals nought: $\phi_z=0$ on
$z=-h$, where $h$ --- water depth. In this case equation $v=-{i}{u}$, which came
from Laplace equation, can not be neglected, hence the solution is sought in the
following form:
\begin{equation}
    \phi(x,z)
    =
    \InverseFourierY{
        \left( C_1 e^{2\pi u z} + C_2 e^{-2\pi u z} \right)
        E(u)
    }{x}.
    \label{eq:guessed-sol-2d-full}
\end{equation}
Plugging $\phi$ into the boundary condition on the sea bottom yields
\begin{equation*}
    C_1 e^{-2\pi u h} - C_2 e^{2\pi u h} = 0,
\end{equation*}
hence $C_1=\frac{1}{2}C{e}^{2\pi{u}{h}}$ and
$C_2=-\frac{1}{2}C{e}^{-2\pi{u}{h}}$. Constant $C$ may take arbitrary value
here, because after plugging it becomes part of unknown coefficients $E(u)$.
Plugging formulae for $C_1$ and $C_2$ into eqref:eq:guessed-sol-2d-full yields
\begin{equation*}
    \phi(x,z) = \InverseFourierY{ \Sinh{2\pi u (z+h)} E(u) }{x}.
\end{equation*}
Performing analogous to the previous section transformations yields final
formula for $\phi(x,z)$:
\begin{equation}
\boxed{
    \phi(x,z,t)
    =
  \InverseFourierY{
        \frac{\Sinh{2\pi u (z+h)}}{2\pi u}
        \frac{
            \FourierY{ \zeta_t / \left(i f(x) - 1\right) }{u}
        }{
            \FourierY{ \FunSecond{\zeta(x,t)} }{u}
        }
    }{x},
}
    \label{eq:solution-2d-full}
\end{equation}
where $\FunSecond{z}$ --- a function, form of which is defined in section
[[#sec:compute-delta]] and which satisfies equation
$\FourierY{\FunSecond{z}}{u}=\Sinh{2\pi{u}{z}}$.

**** Reducing to the formulae from linear wave theory.
Check the validity of derived formulae by substituting $\zeta(x,t)$ with known
analytic formula for plain waves. Symbolic computation of Fourier transforms in
this section were performed in Mathematica cite:mathematica10. In the framework
of linear wave theory assume that waves have small amplitude compared to their
lengths, which allows us simplifying initial system of equations
eqref:eq:problem-2d to
\begin{align*}
    & \phi_{xx}+\phi_{zz}=0,\\
    & \zeta_t = -\phi_z & \text{на }z=\zeta(x,t),
\end{align*}
solution to which is written as
\begin{equation*}
    \phi(x,z,t)
    =
    -\InverseFourierY{
        \frac{e^{2\pi u z}}{2\pi u}
        \FourierY{\zeta_t}{u}
    }{x}
    .
\end{equation*}
Propagating wave profile is defined as $\zeta(x,t)=A\cos(2\pi(kx-t))$. Plugging
this formula into eqref:eq:solution-2d yields
$\phi(x,z,t)=-\frac{A}{k}\sin(2\pi(kx-t))\Sinh{2\pi{k}{z}}$. In order to reduce
it to the formula from linear wave theory, rewrite hyperbolic sine in
exponential form, discard the term containing $e^{-2\pi{k}{z}}$ as contradicting
condition $\phi\underset{z\rightarrow-\infty}{\longrightarrow}0$. Taking real
part of the resulting formula yields
$\phi(x,z,t)=\frac{A}{k}e^{2\pi{k}{z}}\sin(2\pi(kx-t))$, which corresponds to
the known formula from linear wave theory. Similarly, under small-amplitude
waves assumption the formula for finite depth fluid eqref:eq:solution-2d-full is
reduced to
\begin{equation*}
    \phi(x,z,t)
    =
    -\InverseFourierY{
        \frac{\Sinh{2\pi u (z+h)}}{2\pi u \Sinh{2\pi u h}}
        \FourierY{\zeta_t}{u}
    }{x}.
\end{equation*}
Substituting $\zeta(x,t)$ with propagating plain wave profile formula yields
\begin{equation}
    \label{eq:solution-2d-linear}
    \phi(x,z,t)=\frac{A}{k}
    \frac{\Sinh{2 \pi k (z+h)}}{ \Sinh{2 \pi k h} }
    \sin(2 \pi (k x-t)),
\end{equation}
which corresponds to the formula from linear wave theory for finite depth fluid.

Different forms of Laplace equation solutions, in which decaying exponent is
written with either "+" or "-" signs, may cause incompatibilities between
formulae from linear wave theory and formulae derived in this work, where
$\sinh$ is used instead of $\cosh$. Equality
$\frac{\Sinh{2\pi{k}(z+h)}}{\Sinh{2\pi{k}{h}}}\approx\frac{\sinh(2\pi{k}(z+h))}{\sinh(2\pi{k}{h})}$
becomes strict on the free surface, and difference between left-hand and
right-hand sides increases when approaching sea bottom (for sufficiently large
depth difference near free surface is negligible). So, for sufficiently large
depth any function ($\cosh$ or $\sinh$) may be used for velocity potential
computation near free surface.

Reducing eqref:eq:solution-2d и eqref:eq:solution-2d-full to the known formulae
from linear wave theory shows, that formula for infinite depth
eqref:eq:solution-2d is not suitable to compute velocity potentials with Fourier
method, because it does not have symmetry, which is required for discrete
Fourier transform. However, formula for finite depth can be used instead by
setting $h$ to some characteristic water depth. For standing wave reducing to
linear wave theory formulae is made under the same assumptions.

*** Three-dimensional velocity field
Three-dimensional version of eqref:eq:problem is written as
\begin{align}
    \label{eq:problem-3d}
    & \phi_xx + \phi_yy + \phi_zz = 0,\\
    & \zeta_t + \zeta_x\phi_x + \zeta_y\phi_y
    =
    \frac{\zeta_x}{\sqrt{1 + \zeta_x^2}} \phi_x
    +\frac{\zeta_y}{\sqrt{\vphantom{\zeta_x^2}\smash[b]{1 + \zeta_y^2}}} \phi_y
    - \phi_z, & \text{на }z=\zeta(x,y,t).\nonumber
\end{align}
Again, use Fourier method to solve it. Applying Fourier transform to both sides
of Laplace equation yields
\begin{equation*}
    -4 \pi^2 \left( u^2 + v^2 + w^2 \right)
    \FourierY{\phi(x,y,z)}{u,v,w} = 0,
\end{equation*}
hence $w=\pm{i}\sqrt{u^2+v^2}$. We seek solution in the form of inverse Fourier
transform $\phi(x,y,z)=\InverseFourierY{E(u,v,w)}{x,y,z}$. Plugging
$w=i\sqrt{u^2+v^2}$ into the formula yields
\begin{equation*}
    \phi(x,y,z) = \InverseFourierY{
        \left(
            C_1 e^{2\pi \sqrt{u^2+v^2} z}
            -C_2 e^{-2\pi \sqrt{u^2+v^2} z}
        \right)
        E(u,v)
    }{x,y}.
\end{equation*}
Plugging $\phi$ into the boundary condition on the sea bottom (analogous to
two-dimensional case) yields
\begin{equation}
    \label{eq:guessed-sol-3d}
    \phi(x,y,z) = \InverseFourierY{
        \Sinh{2\pi \sqrt{u^2+v^2} (z+h)} E(u,v)
    }{x,y}.
\end{equation}
Plugging $\phi$ into the boundary condition on the free surface yields
\begin{equation*}
    \arraycolsep=1.4pt
    \begin{array}{rl}
        \zeta_t = & i f_1(x,y) \InverseFourierY{2 \pi u \Sinh{2\pi \sqrt{u^2+v^2} (z+h)}E(u,v)}{x,y} \\
        + & i f_2(x,y) \InverseFourierY{2 \pi v \Sinh{2\pi \sqrt{u^2+v^2} (z+h)}E(u,v)}{x,y} \\
        - & \InverseFourierY{2 \pi \sqrt{u^2+v^2} \Sinh{2\pi \sqrt{u^2+v^2} (z+h)}E(u,v)}{x,y}
    \end{array}
\end{equation*}
where $f_1(x,y)={\zeta_x}/{\sqrt{1+\zeta_x^2}}-\zeta_x$ and
$f_2(x,y)={\zeta_y}/{\sqrt{\vphantom{\zeta_x^2}\smash[b]{1+\zeta_y^2}}}-\zeta_y$.
Applying Fourier transform to both sides of the equation yields formula for
coefficients $E$:
\begin{equation*}
    \arraycolsep=1.4pt
    \begin{array}{rl}
        \FourierY{\zeta_t}{u,v} = &
        \FourierY{i f_1(x,y) \InverseFourierY{2 \pi u \Sinh{2\pi \sqrt{u^2+v^2} (z+h)} E(u,v)}{x,y}}{u,v}  \\
        + & \FourierY{i f_2(x,y) \InverseFourierY{2 \pi v \Sinh{2\pi \sqrt{u^2+v^2} (z+h)} E(u,v)}{x,y}}{u,v}  \\
        - & 2 \pi \sqrt{u^2+v^2} \Sinh{2\pi \sqrt{u^2+v^2} (z+h)} E(u,v)
    \end{array}
\end{equation*}
Final solution is obtained after plugging $E(u,v)$ into eqref:eq:guessed-sol-3d.

* Numerical methods and experimental results
** The shape of ACF for different types of waves
*** Two methods to find ocean waves ACF
**** Analytic method of finding the ACF.
The simplest way to find auto-covariate function for a particular ocean wave
profile is to apply Wiener---Khinchin theorem. According to this theorem the
autocorrelation $K$ of a function $\zeta$ is given by the Fourier transform of
the absolute square of the function:
\begin{equation}
  K(t) = \Fourier{\left| \zeta(t) \right|^2}.
  \label{eq:wiener-khinchin}
\end{equation}
When $\zeta$ is replaced with actual wave profile, this formula gives you
analytic formula for the corresponding ACF.

For three-dimensional wave profile (2D in space and 1D in time) analytic
formula is a polynomial of high order and is best obtained via computer
algebra software. Then for practical usage it can be approximated by
superposition of exponentially decaying cosines (which is how ACF of a
stationary ARMA process looks like cite:box1976time).

**** Empirical method of finding the ACF.
However, for three-dimensional case there exists simpler empirical method which
does not require sophisticated software to determine shape of the ACF. It is
known that ACF represented by exponentially decaying cosines of a wave profile
satisfies first order Stokes' equations for gravity waves cite:boccotti1983wind.
So, if the shape of the wave profile is the only concern, then one can simply
multiply it by a decaying exponent to get appropriate ACF. This ACF will not
reflect other wave profile parameters such as wave height and period, but opens
possibility to simulate waves of a particular non-analytic shape by "drawing"
their profile, then multiplying it by an exponent and using the resulting
function as ACF. So, this empirical method is imprecise but offers simpler
alternative to Wiener---Khinchin theorem; it is mainly useful to test ARMA
model.

*** Examples of ACFs for various types of wave profiles
**** Standing wave.
For three-dimensional standing wave the profile is approximated by
\begin{equation}
  \zeta(t, x, y) = A \sin (k_x x + k_y y) \sin (\sigma t).
  \label{eq:standing-wave}
\end{equation}
In order to get ACF via analytic method one needs to multiply this formula by
a decaying exponent, because Fourier transform is defined for a function $f$ that
$f \underset{x \rightarrow \pm \infty}{\longrightarrow} 0$. The formula of the
profile then transforms to
\begin{equation}
  \zeta(t, x, y) =
  A
  \exp\left[-\alpha (|t|+|x|+|y|) \right]
  \sin (k_x x + k_y y) \sin (\sigma t).
  \label{eq:decaying-standing-wave}
\end{equation}
Then, if one takes 3D Fourier transform of this formula via any capable
computer algebra software, the resulting polynomial may be fitted to the
following ACF approximation.
\begin{equation}
  K(t,x,y) =
  \gamma
  \exp\left[-\alpha (|t|+|x|+|y|) \right]
  \cos \beta t
  \cos \left[ \beta x + \beta y \right].
  \label{eq:standing-wave-acf}
\end{equation}
So, after applying Wiener---Khinchin theorem we get the same formula but with
sines replaced with cosines. This replacement is important because the value of
ACF at $(0,0,0)$ equals to the variance of wave elevation, and if one used sines
the value would be wrong.

If one tries to replicate the same formula via empirical method, the usual way
is to adapt eqref:eq:decaying-standing-wave to match eqref:eq:standing-wave-acf.
This can be done by changing the phase of the sine, or by replacing sine with
cosine to move the maximum of the function to $(0,0,0)$.

**** Propagating wave.
Three-dimensional profile of this type of wave is approximated by
\begin{equation}
  \zeta(t, x, y) = A \cos (\sigma t + k_x x + k_y y).
  \label{eq:propagating-wave}
\end{equation}
For the analytic method one may repeat steps from the previous two paragraphs
with ACF approximated by
\begin{equation}
  K(t,x,y) =
  \gamma
  \exp\left[-\alpha (|t|+|x|+|y|) \right]
  \cos\left[\beta (t+x+y) \right].
  \label{eq:propagating-wave-acf}
\end{equation}
For the empirical method propagating wave profile is simply multiplied by
a decaying exponent without need to adapt the maximum value of ACF.

*** Comparison of studied methods
To summarise, the analytic method of finding ocean wave's ACF reduces to the
following steps:
- Make wave profile decay when approach $\pm \infty$ by multiplying it by
  a decaying exponent.
- Take Fourier transform of absolute square of the decaying wave profile using
  computer algebra software.
- Fit the resulting polynomial to the appropriate ACF approximation.

Two examples in this section showed that in case of standing and propagating
waves their decaying profiles resemble the corresponding ACFs with the exception
that the origin should be moved to the function's maximal value for the ACF to
be useful in ARMA model simulations. So, using the empirical method the ACF is
found in the following steps:
- Make wave profile decay when approach $\pm \infty$ by multiplying it by
  a decaying exponent.
- Move maximum value to the origin by adjusting phases or using trigonometric
  identities to shift the phase of the resulting function.

** Additional formulae, methods and algorithms for ARMA model
*** Wave elevation distribution approximation
*** White noise generation
*** Wavy surface generation
*** Velocity potential normalisation formulae
:PROPERTIES:
:CUSTOM_ID: sec:compute-delta
:END:
** ARMA model verification
*** Numerical experiments implementation methodology
*** Verification of wavy surface integral characteristics
Research shows cite:рожков1990вероятностные that several ocean wave
characteristics (e.g. wave height, wave period, wave length etc.) have Weibull
distribution differing only in shape parameter (tab. [[tab:weibull-shape]]), and
wave elevation has Gaussian distribution. In order to verify that distributions
corresponding to generated realisation are correct, quantile-quantile plots are
used (plots where analytic quantile values are used for X axis and estimated
quantile values for Y axis). If the estimated distribution matches analytic then
the graph has the form of the straight line. Tails of the graph may diverge from
the straight line, because they can not be reliably estimated from the
realisation. Different methods of extracting waves from realisation produce
variations in quantile function tails, it is probably impractical to extract
every possible wave from realisation since they may (and often) overlap.

#+name: tab:weibull-shape
#+caption: Values of Weibull shape parameter for different wave characteristics.
#+attr_latex: :booktabs t
| Characteristic       | Weibull shape ($k$) |
|----------------------+---------------------|
| Wave height          |                   2 |
| Wave length          |                 2.3 |
| Crest length         |                 2.3 |
| Wave period          |                   3 |
| Wave slope           |                 2.5 |
| Three-dimensionality |                 2.5 |

Verification was performed for standing and propagating waves. The corresponding
ACFs and quantile-quantile plots of wave characteristics distributions are shown
in fig. [[fig:acf-plots]], [[fig:standing-wave-distributions]],
[[fig:propagating-wave-distributions]].

#+begin_src gnuplot :exports none :output-dir build
# set absolute loadpath and go to build directory
set loadpath GPVAL_PWD."/gnuplot" GPVAL_PWD."/data/verification"
system "mkdir -p build"
cd "build"

# ACFs of standing and propagating waves
sx=300
sy=200
outext='svg'
# Standing wave ACF
do for [i=0:4] {
  reset
  infile="standing-acf-" . i
  load "acf.gnuplot"
  system "inkscape --without-gui --export-eps=" . infile . ".eps " . infile . ".svg"
}
# Propagating wave ACF
do for [i=0:4] {
  reset
  infile="propagating-acf-0" . i
  load "acf.gnuplot"
  system "inkscape --without-gui --export-eps=" . infile . ".eps " . infile . ".svg"
}

# Q-Q plots
sx=250
sy=250
outext='svg'
# Standing waves
do for [i in "elevation wave-height-x wave-length-x wave-period"] {
  reset
  show loadpath
  labelText=i
  infile="standing-" . i
  load "quantile.gnuplot"
  system "inkscape --without-gui --export-eps=" . infile . ".eps " . infile . ".svg"
}
# Propagating waves
do for [i in "elevation wave-height-x wave-length-x wave-period"] {
  reset
  labelText=i
  infile="propagating-" . i
  load "quantile.gnuplot"
  system "inkscape --without-gui --export-eps=" . infile . ".eps " . infile . ".svg"
}
exit
#+end_src

#+RESULTS:

#+caption: Time slices of ACF function for standing (left column) and propagating waves (right column).
#+name: fig:acf-plots
| \includegraphics{standing-acf-0} | \includegraphics{propagating-acf-00} |
| \includegraphics{standing-acf-1} | \includegraphics{propagating-acf-01} |
| \includegraphics{standing-acf-2} | \includegraphics{propagating-acf-02} |
| \includegraphics{standing-acf-3} | \includegraphics{propagating-acf-03} |
| \includegraphics{standing-acf-4} | \includegraphics{propagating-acf-04} |

#+caption: Quantile-quantile plots for standing waves.
#+name: fig:standing-wave-distributions
| \includegraphics{standing-elevation}     | \includegraphics{standing-wave-height-x} |
| \includegraphics{standing-wave-length-x} | \includegraphics{standing-wave-period}   |

#+caption: Quantile-quantile plots for propagating waves.
#+name: fig:propagating-wave-distributions
| \includegraphics{propagating-elevation}     | \includegraphics{propagating-wave-height-x} |
| \includegraphics{propagating-wave-length-x} | \includegraphics{propagating-wave-period}   |

*** TODO Discuss graphs
*** Verification of velocity potential fields
:PROPERTIES:
:CUSTOM_ID: sec:compare-formulae
:END:

*** Non-physical nature of ARMA model
ARMA model, owing to its non-physical nature, does not have the notion of ocean
wave; it simulates wavy surface as a whole instead. Motions of individual waves
and their shape are often rough, and the total number of waves can not be
predicted precisely. However, integral characteristics of wavy surface match the
ones of real ocean waves.

In theory, ocean waves themselves can be chosen as ACFs, the only pre-processing
step is to make them decay exponentially. This is required to make AR model
stationary and MA model parameters finding algorithm to converge.

* High-performance software implementation of ocean wave simulation
** Computational model
*** Governing principles
- There are no messages in the model, a kernel is itself a message that can
  be sent over network to another node and directly access any kernel on the
  local node. It is responsibility of a programmer to ensure that such kernel
  exist.
- A kernel is best viewed as a cooperative routine, which is submitted to
  execution queue upon the call and is executed asynchronously by system
  scheduler. There can be any number of calls to other subroutines inside
  routine body. Every call submits corresponding subroutine to execution
  queue and returns immediately. Kernels in the queue can be executed in any
  order; this fact is used by system scheduler to exploit parallelism
  offered by the computer by distributed kernels from the queue across
  available cluster nodes and processor cores.
- Asynchronous execution prevents the use of explicit synchronisation after
  the call to subroutine is made; system scheduler returns control flow to
  the routine each time one of its subroutine returns. Such *cooperation*
  transforms each routine which calls subroutines into event handler, where
  each event is a subroutine and the handler is the routine that called
  them. In many batch processing programmes control flow enters each routine
  which calls subroutines at least two times: the first time it occurs upon
  the call to the routine and the second time happens when control flow
  returns to the caller after completion of a subroutine.
- The routine may communicate with any number of local kernels, addresses of
  which it knows; communication with routines which are not adjacent in the
  call stack complexifies control flow and call stack looses its tree shape.
  It is responsibility of a programmer to ensure that communicating kernels
  are present in memory. One way to ensure this is to perform communication
  between subroutines which are called from the same routine. Incidentally,
  it is the usual way of writing batch parallel programmes: each such
  communication creates a cycle in the call stack graph, and a cycle between
  different (possibly non-adjacent) layers of kernel hierarchy is redundant,
  because there are other edges that can be used instead. The situation may
  be different when the programme is interactive or event-based.
- The other disadvantage of communication which does no occur along
  hierarchical links is that it complexifies resiliency algorithms when
  executed across cluster network. Since it is difficult to ensure that
  a kernel resides in memory of a neighbour node, because a node may fail in
  the middle of its execution. Thus, upon failure of a node all of the
  subroutines which are called from the same routine must be restarted. This
  encourage a programmer to construct
   - deep hierarchies of tightly-coupled kernels (which require
    communication on the same level of hierarchy) to reduce overhead of
    recomputation,
   - fat hierarchies of loosely-coupled kernels.
  Deep hierarchy is not only requirement of technology, it helps optimise
  communication of cluster nodes limiting it to adjacent nodes.
- No explicit synchronisation.
- Local communications between adjacent nodes in the hierarchy.
*** Mapping wavy surface generation algorithm on computational model
** SMP implementation
*** Load balancing algorithm
*** Evaluation
**** Performance of MPI, OpenMP, OpenCL implementations.
**** Performance of load balancing algorithm.
** MPP implementation
*** Cluster node discovery algorithm
*** Fail over algorithm
**** Fault tolerance.
**** High availability.
* Conclusion
* Acknowledgements
* List of acronyms and symbols

#+attr_latex: :booktabs t :align lp{0.8\linewidth}
| <<<MPP>>>  | Massively Parallel Processing, computers with distributed memory                           |
| <<<SMP>>>  | Symmetric Multi-Processing, computers with shared memory                                   |
| <<<ACF>>>  | auto-covariate function                                                                    |
| <<<FFT>>>  | fast Fourier transform                                                                     |
| <<<PRNG>>> | pseudo-random number generator                                                             |
| <<<BC>>>   | boundary condition                                                                         |
| <<<PDE>>>  | partial differential equation                                                              |
| <<<NIT>>>  | non-linear inertia-less transform                                                          |
| <<<AR>>>   | auto-regressive process                                                                    |
| <<<ARMA>>> | auto-regressive moving-average process                                                     |
| <<<MA>>>   | moving average process                                                                     |
| <<<LH>>>   | Longuet---Higgins model                                                                    |
| <<<LAMP>>> | Large Amplitude Motion Programme, a programme that simulates ship behaviour in ocean waves |
| <<<CLT>>>  | central limit theorem                                                                      |
| <<<PM>>>   | Pierson---Moskowitz ocean wave spectrum approximation                                      |
| <<<YW>>>   | Yule---Walker equations                                                                    |

#+begin_latex
\input{postamble}
#+end_latex

bibliographystyle:ugost2008
bibliography:bib/refs.bib

* Appendix
